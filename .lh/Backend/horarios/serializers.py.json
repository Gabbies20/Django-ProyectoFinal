{
    "sourceFile": "Backend/horarios/serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1717868952783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717869122068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n       \n class HorarioSerializerCreate(serializers.ModelSerializer):\n     class Meta:\n         model = Horario\n-        fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', ''grupo_cod', 'periodo_cod')\n+        fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', 'franja_cod','grupo_cod', 'periodo_cod')\n \n     def validate_horario_cod(self, horario_cod):\n         horarioCod = Horario.objects.filter(horario_cod=horario_cod).first()\n         if horarioCod is not None:\n"
                },
                {
                    "date": 1717869142625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n     def validate_aula_cod(self, aula_cod):\n         if not aula_cod:\n             raise serializers.ValidationError('Debe asignar un aula.')\n         return aula_cod\n+    \n \n     def validate_grupo_cod(self, grupo_cod):\n         if not grupo_cod:\n             raise serializers.ValidationError('Debe asignar un grupo.')\n"
                },
                {
                    "date": 1717869149470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,12 @@\n         if not aula_cod:\n             raise serializers.ValidationError('Debe asignar un aula.')\n         return aula_cod\n     \n+    def validate_franja_cod(self, aula_cod):\n+        if not aula_cod:\n+            raise serializers.ValidationError('Debe asignar un aula.')\n+        return aula_cod\n \n     def validate_grupo_cod(self, grupo_cod):\n         if not grupo_cod:\n             raise serializers.ValidationError('Debe asignar un grupo.')\n"
                },
                {
                    "date": 1717869160453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,10 +97,10 @@\n         if not aula_cod:\n             raise serializers.ValidationError('Debe asignar un aula.')\n         return aula_cod\n     \n-    def validate_franja_cod(self, aula_cod):\n-        if not aula_cod:\n+    def validate_franja_cod(self, franja_cod):\n+        if not franja_cod:\n             raise serializers.ValidationError('Debe asignar un aula.')\n         return aula_cod\n \n     def validate_grupo_cod(self, grupo_cod):\n"
                },
                {
                    "date": 1717869166387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n     \n     def validate_franja_cod(self, franja_cod):\n         if not franja_cod:\n             raise serializers.ValidationError('Debe asignar un aula.')\n-        return aula_cod\n+        return franja_cod\n \n     def validate_grupo_cod(self, grupo_cod):\n         if not grupo_cod:\n             raise serializers.ValidationError('Debe asignar un grupo.')\n"
                },
                {
                    "date": 1717869172194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n         return aula_cod\n     \n     def validate_franja_cod(self, franja_cod):\n         if not franja_cod:\n-            raise serializers.ValidationError('Debe asignar un aula.')\n+            raise serializers.ValidationError('Debe asignar una franja.')\n         return franja_cod\n \n     def validate_grupo_cod(self, grupo_cod):\n         if not grupo_cod:\n"
                },
                {
                    "date": 1718293764216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,211 +1,108 @@\n from rest_framework import serializers\n-from . models import *\n+from .models import *\n \n-\n-\n-\n-\n-\n class UsuarioSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Usuario\n        fields = '__all__'\n-      \n \n-\n-\n-\n class AsignaturaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Asignatura\n        fields = '__all__'\n-      \n \n-\n class AulaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Aula\n        fields = '__all__'\n-      \n \n-\n class FranjaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Franja\n        fields = '__all__'\n-      \n \n-\n class GrupoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Grupo\n        fields = '__all__'\n-      \n \n-    \n class ProfesorSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Profesor\n        fields = '__all__'\n-      \n+\n class ProfesorSerializerMejorado(serializers.ModelSerializer):\n     usuario = UsuarioSerializer()\n     class Meta:\n-        fields = ('usuario','profesor_cod','nombre','email','hash','hash1')\n+        model = Profesor\n+        fields = ('usuario', 'profesor_cod', 'nombre', 'email')\n \n-\n-\n class HorarioSerializer(serializers.ModelSerializer):\n     profesor_cod = ProfesorSerializer()\n-    asignatura_cod=AsignaturaSerializer()\n-    aula_cod= AulaSerializer()\n-    franja_cod=FranjaSerializer()\n-    grupo_cod=GrupoSerializer()\n+    asignatura_cod = AsignaturaSerializer()\n+    aula_cod = AulaSerializer()\n+    franja_cod = FranjaSerializer()\n+    grupo_cod = GrupoSerializer()\n     class Meta:\n        model = Horario\n-       fields = ('horario_cod','profesor_cod','dia','asignatura_cod','aula_cod','franja_cod','grupo_cod','periodo_cod')\n-      \n+       fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', 'franja_cod', 'grupo_cod', 'periodo_cod')\n+\n class HorarioSerializerCreate(serializers.ModelSerializer):\n     class Meta:\n         model = Horario\n-        fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', 'franja_cod','grupo_cod', 'periodo_cod')\n+        fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', 'franja_cod', 'grupo_cod', 'periodo_cod')\n \n     def validate_horario_cod(self, horario_cod):\n-        horarioCod = Horario.objects.filter(horario_cod=horario_cod).first()\n-        if horarioCod is not None:\n+        if Horario.objects.filter(horario_cod=horario_cod).exists():\n             raise serializers.ValidationError('Ya existe un horario con ese código.')\n         return horario_cod\n \n-    def validate_profesor_cod(self, profesor_cod):\n-        if not profesor_cod:\n-            raise serializers.ValidationError('Debe asignar un profesor.')\n-        return profesor_cod\n-\n     def validate_dia(self, dia):\n         if dia not in dict(Horario.DIAS).keys():\n             raise serializers.ValidationError('Día no válido. Debe ser una de las siguientes letras: L, M, X, J, V, S, D.')\n         return dia\n \n-    def validate_asignatura_cod(self, asignatura_cod):\n-        if not asignatura_cod:\n-            raise serializers.ValidationError('Debe asignar una asignatura.')\n-        #if asignatura_cod.horario_set.count() >= 3:\n-         #   raise serializers.ValidationError('Una asignatura no puede tener más de 3 horarios.')\n-        return asignatura_cod\n-\n-    def validate_aula_cod(self, aula_cod):\n-        if not aula_cod:\n-            raise serializers.ValidationError('Debe asignar un aula.')\n-        return aula_cod\n-    \n-    def validate_franja_cod(self, franja_cod):\n-        if not franja_cod:\n-            raise serializers.ValidationError('Debe asignar una franja.')\n-        return franja_cod\n-\n-    def validate_grupo_cod(self, grupo_cod):\n-        if not grupo_cod:\n-            raise serializers.ValidationError('Debe asignar un grupo.')\n-        return grupo_cod\n-\n     def validate_periodo_cod(self, periodo_cod):\n         if not (1 <= periodo_cod <= 9):\n-            raise serializers.ValidationError('El periodo debe estar entre 1 y 2.')\n+            raise serializers.ValidationError('El periodo debe estar entre 1 y 9.')\n         return periodo_cod\n \n-\n-\n-\n-\n-    \n class AusenciaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Ausencia\n-       fileds = '__all__'\n+       fields = '__all__'\n \n-\n-\n-\n-#SERIALIZADORES:\n class AsignaturaSerializerCreate(serializers.ModelSerializer):\n     class Meta:\n         model = Asignatura\n-        fields = ('asignatura_cod','descripcion')\n-        \n-        \n+        fields = ('asignatura_cod', 'descripcion')\n+\n     def validate_asignatura_cod(self, asignatura_cod):\n-        asignaturaCode = Asignatura.objects.filter(asignatura_cod=asignatura_cod).first()\n-        if(not asignaturaCode is None):\n-            if(not self.instance is None and asignaturaCode.asignatura_cod == self.instance.asignatura_cod):\n-                pass\n-            else:\n-                raise serializers.ValidationError('Ya existe una asignatura con ese código.')\n-            \n+        if Asignatura.objects.filter(asignatura_cod=asignatura_cod).exists():\n+            raise serializers.ValidationError('Ya existe una asignatura con ese código.')\n         return asignatura_cod\n-    \n-    \n-    def validate_descripcion(self,descripcion):\n+\n+    def validate_descripcion(self, descripcion):\n         if len(descripcion) < 2:\n-             raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n+            raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n         return descripcion\n-    \n-    \n-    def create(self, validated_data):\n-        asignatura = Asignatura.objects.create(\n-             asignatura_cod = validated_data['asignatura_cod'],\n-             descripcion = validated_data['descripcion']\n-         )\n-        return asignatura\n-    \n-    \n-    # def update(self, instance, validated_data):\n-    #     instance.asignatura_cod = validated_data['asignatura_cod']\n-    #     instance.descripcion = validated_data['descripcion']\n-    #     return instance\n-    \n \n-\n class AulaSerializerCreate(serializers.ModelSerializer):\n     class Meta:\n         model = Aula\n-        fields = ('aula_cod','descripcion')\n-        \n-    def validate_aula_cod(self,aula_cod):\n-        aulaCode = Aula.objects.filter(aula_cod=aula_cod).first()\n-        if(not aulaCode is None):\n-            if(not self.instance is None and aulaCode.aulaa_cod == self.instance.aula_cod):\n-                pass\n-            else:\n-                raise serializers.ValidationError('Ya existe un aula con ese código.')\n-            \n+        fields = ('aula_cod', 'descripcion')\n+\n+    def validate_aula_cod(self, aula_cod):\n+        if Aula.objects.filter(aula_cod=aula_cod).exists():\n+            raise serializers.ValidationError('Ya existe un aula con ese código.')\n         return aula_cod\n-    \n-    \n-    def validate_descripcion(self,descripcion):\n+\n\\ No newline at end of file\n+    def validate_descripcion(self, descripcion):\n         if len(descripcion) < 2:\n-             raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n+            raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n         return descripcion\n-    \n-    # Método create: Django REST Framework ya proporciona un método create por defecto en ModelSerializer, por lo que no es necesario redefinirlo a menos que necesites agregar lógica adicional.\n-    # def create(self, validated_data):\n-    #     aula = Aula.objects.create(\n-    #          aula_cod = validated_data['aula_cod'],\n-    #          descripcion = validated_data['descripcion']\n-    #      )\n-    #     return aula\n-    \n-    \n-    #  def validate(self, attrs):\n-    #     # Validación adicional que involucra múltiples campos\n-    #     aula_cod = attrs.get('aula_cod')\n-    #     descripcion = attrs.get('descripcion')\n-    \n-    def create(self, validated_data):\n-        #El metodo validate** -> validación general del objeto.\n-        aula = Aula.objects.create(**validated_data)\n-        return aula\n-    \n+\n class ArchivoSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Archivo\n-        fields = '__all__'\n+        fields = '__all__'\n"
                },
                {
                    "date": 1718293859092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,5 +104,50 @@\n \n class ArchivoSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Archivo\n-        fields = '__all__'\n\\ No newline at end of file\n+        fields = '__all__'\n+\n+\n+class UsuarioSerializerCreate(serializers.ModelSerializer):\n+    class Meta:\n+        model = Usuario\n+        fields = ('username', 'password', 'email', 'first_name', 'last_name', 'rol')\n+\n+    def create(self, validated_data):\n+        user = Usuario.objects.create_user(\n+            username=validated_data['username'],\n+            password=validated_data['password'],\n+            email=validated_data['email'],\n+            first_name=validated_data.get('first_name', ''),\n+            last_name=validated_data.get('last_name', ''),\n+            rol=validated_data['rol']\n+        )\n+        return user\n+\n+class ProfesorSerializerCreate(serializers.ModelSerializer):\n+    usuario = UsuarioSerializerCreate()\n+\n+    class Meta:\n+        model = Profesor\n+        fields = ('usuario', 'profesor_cod', 'nombre', 'email')\n+\n+    def create(self, validated_data):\n+        usuario_data = validated_data.pop('usuario')\n+        usuario = UsuarioSerializerCreate().create(usuario_data)\n+        profesor = Profesor.objects.create(usuario=usuario, **validated_data)\n+        return profesor\n+\n+    def validate_profesor_cod(self, profesor_cod):\n+        if Profesor.objects.filter(profesor_cod=profesor_cod).exists():\n+            raise serializers.ValidationError('Ya existe un profesor con ese código.')\n+        return profesor_cod\n+\n+    def validate_email(self, email):\n+        if Profesor.objects.filter(email=email).exists():\n+            raise serializers.ValidationError('Ya existe un profesor con ese correo electrónico.')\n+        return email\n+\n+    def validate_nombre(self, nombre):\n+        if len(nombre) < 2:\n+            raise serializers.ValidationError('El nombre debe tener al menos 2 caracteres.')\n+        return nombre\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718293980857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,5 +149,9 @@\n \n     def validate_nombre(self, nombre):\n         if len(nombre) < 2:\n             raise serializers.ValidationError('El nombre debe tener al menos 2 caracteres.')\n-        return nombre\n\\ No newline at end of file\n+        return nombre\n+    \n+    \n+    \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1718293987260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,5 +155,6 @@\n     \n     \n         \"\"\"\n         \n+        \n         \"\"\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1718499677991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+from rest_framework import serializers\n+from .models import *\n+\n+class UsuarioSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Usuario\n+       fields = '__all__'\n+\n+class AsignaturaSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Asignatura\n+       fields = '__all__'\n+\n+class AulaSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Aula\n+       fields = '__all__'\n+\n+class FranjaSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Franja\n+       fields = '__all__'\n+\n+class GrupoSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Grupo\n+       fields = '__all__'\n+\n+class ProfesorSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Profesor\n+       fields = '__all__'\n+\n+class ProfesorSerializerMejorado(serializers.ModelSerializer):\n+    usuario = UsuarioSerializer()\n+    class Meta:\n+        model = Profesor\n+        fields = ('usuario', 'profesor_cod', 'nombre', 'email')\n+\n+class HorarioSerializer(serializers.ModelSerializer):\n+    profesor_cod = ProfesorSerializer()\n+    asignatura_cod = AsignaturaSerializer()\n+    aula_cod = AulaSerializer()\n+    franja_cod = FranjaSerializer()\n+    grupo_cod = GrupoSerializer()\n+    class Meta:\n+       model = Horario\n+       fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', 'franja_cod', 'grupo_cod', 'periodo_cod')\n+\n+class HorarioSerializerCreate(serializers.ModelSerializer):\n+    class Meta:\n+        model = Horario\n+        fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', 'franja_cod', 'grupo_cod', 'periodo_cod')\n+\n+    def validate_horario_cod(self, horario_cod):\n+        if Horario.objects.filter(horario_cod=horario_cod).exists():\n+            raise serializers.ValidationError('Ya existe un horario con ese código.')\n+        return horario_cod\n+\n+    def validate_dia(self, dia):\n+        if dia not in dict(Horario.DIAS).keys():\n+            raise serializers.ValidationError('Día no válido. Debe ser una de las siguientes letras: L, M, X, J, V, S, D.')\n+        return dia\n+\n+    def validate_periodo_cod(self, periodo_cod):\n+        if not (1 <= periodo_cod <= 9):\n+            raise serializers.ValidationError('El periodo debe estar entre 1 y 9.')\n+        return periodo_cod\n+\n+class AusenciaSerializer(serializers.ModelSerializer):\n+   class Meta:\n+       model = Ausencia\n+       fields = '__all__'\n+\n+class AsignaturaSerializerCreate(serializers.ModelSerializer):\n+    class Meta:\n+        model = Asignatura\n+        fields = ('asignatura_cod', 'descripcion')\n+\n+    def validate_asignatura_cod(self, asignatura_cod):\n+        if Asignatura.objects.filter(asignatura_cod=asignatura_cod).exists():\n+            raise serializers.ValidationError('Ya existe una asignatura con ese código.')\n+        return asignatura_cod\n+\n+    def validate_descripcion(self, descripcion):\n+        if len(descripcion) < 2:\n+            raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n+        return descripcion\n+\n+class AulaSerializerCreate(serializers.ModelSerializer):\n+    class Meta:\n+        model = Aula\n+        fields = ('aula_cod', 'descripcion')\n+\n+    def validate_aula_cod(self, aula_cod):\n+        if Aula.objects.filter(aula_cod=aula_cod).exists():\n+            raise serializers.ValidationError('Ya existe un aula con ese código.')\n+        return aula_cod\n+\n+    def validate_descripcion(self, descripcion):\n+        if len(descripcion) < 2:\n+            raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n+        return descripcion\n+\n+class ArchivoSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Archivo\n+        fields = '__all__'\n+\n+\n+class UsuarioSerializerCreate(serializers.ModelSerializer):\n+    class Meta:\n+        model = Usuario\n+        fields = ('username', 'password', 'email', 'first_name', 'last_name', 'rol')\n+\n+    def create(self, validated_data):\n+        user = Usuario.objects.create_user(\n+            username=validated_data['username'],\n+            password=validated_data['password'],\n+            email=validated_data['email'],\n+            first_name=validated_data.get('first_name', ''),\n+            last_name=validated_data.get('last_name', ''),\n+            rol=validated_data['rol']\n+        )\n+        return user\n+\n+\n+    \n+    \n+    \n+        \"\"\"\n+            AUSENCIAS\n+        \n+        \"\"\"\n+\n+class AusenciaSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Ausencia\n+        fields = ['profesor_cod', 'fecha', 'motivo']\n+class AusenciaSerializerCreate(serializers.ModelSerializer):\n+\n+    class Meta:\n+        model = Ausencia\n+        fields = ('profesor_cod', 'fecha', 'motivo')\n+\n+    def validate_profesor_cod(self, profesor_cod):\n+        if not Profesor.objects.filter(profesor_cod=profesor_cod).exists():\n+            raise serializers.ValidationError('El profesor especificado no existe.')\n+        return profesor_cod\n+\n+    def validate_motivo(self, value):\n+        if len(value) < 5:\n+            raise serializers.ValidationError('El motivo debe tener al menos 5 caracteres.')\n+        return value\n+\n+    def create(self, validated_data):\n+        ausencia = Ausencia.objects.create(\n+            profesor_cod = validated_data['profesor_cod'],\n+            fecha = validated_data['fecha'],\n+            motivo = validated_data['motivo']\n+        )\n+        return ausencia\n+    \n+    \n+    \n+\"\"\" USUARIOS_PROFESORES\"\"\"\n+   \n+        \n+        \n+class UsuarioSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Usuario\n+        fields = '__all__'\n+\n+class ProfesorSerializerCreate(serializers.ModelSerializer):\n+    usuario = UsuarioSerializer()\n+\n+    class Meta:\n+        model = Profesor\n+        fields = ('usuario', 'profesor_cod', 'nombre', 'email')\n+\n+    def validate_profesor_cod(self, profesor_cod):\n+        if Profesor.objects.filter(profesor_cod=profesor_cod).exists():\n+            raise serializers.ValidationError('El código de profesor ya existe.')\n+        return profesor_cod\n+\n+    def create(self, validated_data):\n+        usuario_data = validated_data.pop('usuario')\n+        usuario, created = Usuario.objects.get_or_create(**usuario_data)\n+        profesor = Profesor.objects.create(usuario=usuario, **validated_data)\n+        return profesor\n+    \n+\n+\"\"\" REGISTRO \"\"\"\n+class UsuarioSerializerRegistro(serializers.Serializer):\n+ \n+    username = serializers.CharField()\n+    password1 = serializers.CharField()\n+    password2 = serializers.CharField()\n+    email = serializers.EmailField()\n+    rol = serializers.IntegerField()\n+    \n+    def validate_username(self,username):\n+        usuario = Usuario.objects.filter(username=username).first()\n+        if(not usuario is None):\n+            raise serializers.ValidationError('Ya existe un usuario con ese nombre')\n+        return username\n+    \n+    \n+    \n+\"\"\"LOGIN\"\"\"\n+from rest_framework_simplejwt.serializers import TokenObtainPairSerializer\n+from rest_framework import serializers\n+from django.contrib.auth import get_user_model\n+\n+User = get_user_model()\n+\n+class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n+    def validate(self, attrs):\n+        data = super().validate(attrs)\n+        user = self.user\n+\n+        if not user.is_active:\n+            raise serializers.ValidationError('La combinación de credenciales no tiene una cuenta activa')\n+\n+        return data\n\\ No newline at end of file\n"
                }
            ],
            "date": 1717868952782,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom . models import *\n\n\n\n\n\n\nclass UsuarioSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Usuario\n       fields = '__all__'\n      \n\n\n\n\nclass AsignaturaSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Asignatura\n       fields = '__all__'\n      \n\n\nclass AulaSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Aula\n       fields = '__all__'\n      \n\n\nclass FranjaSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Franja\n       fields = '__all__'\n      \n\n\nclass GrupoSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Grupo\n       fields = '__all__'\n      \n\n    \nclass ProfesorSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Profesor\n       fields = '__all__'\n      \nclass ProfesorSerializerMejorado(serializers.ModelSerializer):\n    usuario = UsuarioSerializer()\n    class Meta:\n        fields = ('usuario','profesor_cod','nombre','email','hash','hash1')\n\n\n\nclass HorarioSerializer(serializers.ModelSerializer):\n    profesor_cod = ProfesorSerializer()\n    asignatura_cod=AsignaturaSerializer()\n    aula_cod= AulaSerializer()\n    franja_cod=FranjaSerializer()\n    grupo_cod=GrupoSerializer()\n    class Meta:\n       model = Horario\n       fields = ('horario_cod','profesor_cod','dia','asignatura_cod','aula_cod','franja_cod','grupo_cod','periodo_cod')\n      \nclass HorarioSerializerCreate(serializers.ModelSerializer):\n    class Meta:\n        model = Horario\n        fields = ('horario_cod', 'profesor_cod', 'dia', 'asignatura_cod', 'aula_cod', ''grupo_cod', 'periodo_cod')\n\n    def validate_horario_cod(self, horario_cod):\n        horarioCod = Horario.objects.filter(horario_cod=horario_cod).first()\n        if horarioCod is not None:\n            raise serializers.ValidationError('Ya existe un horario con ese código.')\n        return horario_cod\n\n    def validate_profesor_cod(self, profesor_cod):\n        if not profesor_cod:\n            raise serializers.ValidationError('Debe asignar un profesor.')\n        return profesor_cod\n\n    def validate_dia(self, dia):\n        if dia not in dict(Horario.DIAS).keys():\n            raise serializers.ValidationError('Día no válido. Debe ser una de las siguientes letras: L, M, X, J, V, S, D.')\n        return dia\n\n    def validate_asignatura_cod(self, asignatura_cod):\n        if not asignatura_cod:\n            raise serializers.ValidationError('Debe asignar una asignatura.')\n        #if asignatura_cod.horario_set.count() >= 3:\n         #   raise serializers.ValidationError('Una asignatura no puede tener más de 3 horarios.')\n        return asignatura_cod\n\n    def validate_aula_cod(self, aula_cod):\n        if not aula_cod:\n            raise serializers.ValidationError('Debe asignar un aula.')\n        return aula_cod\n\n    def validate_grupo_cod(self, grupo_cod):\n        if not grupo_cod:\n            raise serializers.ValidationError('Debe asignar un grupo.')\n        return grupo_cod\n\n    def validate_periodo_cod(self, periodo_cod):\n        if not (1 <= periodo_cod <= 9):\n            raise serializers.ValidationError('El periodo debe estar entre 1 y 2.')\n        return periodo_cod\n\n\n\n\n\n    \nclass AusenciaSerializer(serializers.ModelSerializer):\n   class Meta:\n       model = Ausencia\n       fileds = '__all__'\n\n\n\n\n#SERIALIZADORES:\nclass AsignaturaSerializerCreate(serializers.ModelSerializer):\n    class Meta:\n        model = Asignatura\n        fields = ('asignatura_cod','descripcion')\n        \n        \n    def validate_asignatura_cod(self, asignatura_cod):\n        asignaturaCode = Asignatura.objects.filter(asignatura_cod=asignatura_cod).first()\n        if(not asignaturaCode is None):\n            if(not self.instance is None and asignaturaCode.asignatura_cod == self.instance.asignatura_cod):\n                pass\n            else:\n                raise serializers.ValidationError('Ya existe una asignatura con ese código.')\n            \n        return asignatura_cod\n    \n    \n    def validate_descripcion(self,descripcion):\n        if len(descripcion) < 2:\n             raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n        return descripcion\n    \n    \n    def create(self, validated_data):\n        asignatura = Asignatura.objects.create(\n             asignatura_cod = validated_data['asignatura_cod'],\n             descripcion = validated_data['descripcion']\n         )\n        return asignatura\n    \n    \n    # def update(self, instance, validated_data):\n    #     instance.asignatura_cod = validated_data['asignatura_cod']\n    #     instance.descripcion = validated_data['descripcion']\n    #     return instance\n    \n\n\nclass AulaSerializerCreate(serializers.ModelSerializer):\n    class Meta:\n        model = Aula\n        fields = ('aula_cod','descripcion')\n        \n    def validate_aula_cod(self,aula_cod):\n        aulaCode = Aula.objects.filter(aula_cod=aula_cod).first()\n        if(not aulaCode is None):\n            if(not self.instance is None and aulaCode.aulaa_cod == self.instance.aula_cod):\n                pass\n            else:\n                raise serializers.ValidationError('Ya existe un aula con ese código.')\n            \n        return aula_cod\n    \n    \n    def validate_descripcion(self,descripcion):\n        if len(descripcion) < 2:\n             raise serializers.ValidationError('Al menos debes indicar 2 caracteres')\n        return descripcion\n    \n    # Método create: Django REST Framework ya proporciona un método create por defecto en ModelSerializer, por lo que no es necesario redefinirlo a menos que necesites agregar lógica adicional.\n    # def create(self, validated_data):\n    #     aula = Aula.objects.create(\n    #          aula_cod = validated_data['aula_cod'],\n    #          descripcion = validated_data['descripcion']\n    #      )\n    #     return aula\n    \n    \n    #  def validate(self, attrs):\n    #     # Validación adicional que involucra múltiples campos\n    #     aula_cod = attrs.get('aula_cod')\n    #     descripcion = attrs.get('descripcion')\n    \n    def create(self, validated_data):\n        #El metodo validate** -> validación general del objeto.\n        aula = Aula.objects.create(**validated_data)\n        return aula\n    \nclass ArchivoSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Archivo\n        fields = '__all__'"
        }
    ]
}