{
    "sourceFile": "Backend/horarios/api_views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 113,
            "patches": [
                {
                    "date": 1717868958481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1717868964890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from .models import *\n-,from .serializers import *\n+from .serializers import *\n from rest_framework.response import Response\n from rest_framework.decorators import api_view\n from django.http import FileResponse, HttpResponse\n from .serializers import *\n"
                },
                {
                    "date": 1717870460824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,10 +254,9 @@\n         #             print(f\"Error: {e}. La ausencia no se puede crear o actualizar.\")\n         #             continue\n \n \n-\n-#CRUD HORARIO: \n+\"\"\"\"\"\"\n @api_view(['POST'])\n def crear_horario(request):\n     serializer = HorarioSerializerCreate(data=request.data)\n     if serializer.is_valid():\n"
                },
                {
                    "date": 1717870466904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,8 +254,9 @@\n         #             print(f\"Error: {e}. La ausencia no se puede crear o actualizar.\")\n         #             continue\n \n \n+\n \"\"\"\"\"\"\n @api_view(['POST'])\n def crear_horario(request):\n     serializer = HorarioSerializerCreate(data=request.data)\n"
                },
                {
                    "date": 1717870479504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -255,9 +255,13 @@\n         #             continue\n \n \n \n-\"\"\"\"\"\"\n+\"\"\"    \n+\n+    HORARIOS\n+\n+\"\"\"\n @api_view(['POST'])\n def crear_horario(request):\n     serializer = HorarioSerializerCreate(data=request.data)\n     if serializer.is_valid():\n"
                },
                {
                    "date": 1717870486760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -279,10 +279,8 @@\n     horario = Horario.objects.get(horario_cod=pk)\n     serializer = HorarioSerializer(horario)\n     return Response(serializer.data)\n \n-\n-\n @api_view(['PUT'])\n def update_horario(request, pk):\n     try:\n         horario = Horario.objects.get(pk=pk)\n"
                },
                {
                    "date": 1717870839637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,8 +301,10 @@\n         return Response(status=status.HTTP_404_NOT_FOUND)\n \n     horario.delete()\n     return Response(status=status.HTTP_204_NO_CONTENT)\n+\n+\n     \n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1717870846661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -292,19 +292,17 @@\n         serializer.save()\n         return Response(serializer.data)\n     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+\n @api_view(['DELETE'])\n-def delete_horario(request, pk):\n+def eliminar_asignatura(request, id):\n+    asignatura = Asignatura.objects.get(asignatura_cod=id)\n     try:\n-        horario = Horario.objects.get(pk=pk)\n-    except Horario.DoesNotExist:\n-        return Response(status=status.HTTP_404_NOT_FOUND)\n-\n-    horario.delete()\n-    return Response(status=status.HTTP_204_NO_CONTENT)\n-\n-\n+        asignatura.delete()\n+        return Response('Asignatura Eliminada')\n+    except Exception as error:\n+        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1717870854447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -294,9 +294,9 @@\n     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n @api_view(['DELETE'])\n-def eliminar_asignatura(request, id):\n+def eliminar_horario(request, id):\n     asignatura = Asignatura.objects.get(asignatura_cod=id)\n     try:\n         asignatura.delete()\n         return Response('Asignatura Eliminada')\n"
                },
                {
                    "date": 1717870862128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n \n \n @api_view(['DELETE'])\n def eliminar_horario(request, id):\n-    asignatura = Asignatura.objects.get(asignatura_cod=id)\n+    horario = Asignatura.objects.get(asignatura_cod=id)\n     try:\n         asignatura.delete()\n         return Response('Asignatura Eliminada')\n     except Exception as error:\n"
                },
                {
                    "date": 1717870869181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n \n \n @api_view(['DELETE'])\n def eliminar_horario(request, id):\n-    horario = Asignatura.objects.get(asignatura_cod=id)\n+    horario = Horario.objects.get(asignatura_cod=id)\n     try:\n         asignatura.delete()\n         return Response('Asignatura Eliminada')\n     except Exception as error:\n"
                },
                {
                    "date": 1717870876663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -295,9 +295,9 @@\n \n \n @api_view(['DELETE'])\n def eliminar_horario(request, id):\n-    horario = Horario.objects.get(asignatura_cod=id)\n+    horario = Horario.objects.get(horario_cod=id)\n     try:\n         asignatura.delete()\n         return Response('Asignatura Eliminada')\n     except Exception as error:\n"
                },
                {
                    "date": 1717870882942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,9 +297,9 @@\n @api_view(['DELETE'])\n def eliminar_horario(request, id):\n     horario = Horario.objects.get(horario_cod=id)\n     try:\n-        asignatura.delete()\n+        horario.delete()\n         return Response('Asignatura Eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n"
                },
                {
                    "date": 1717870892038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,9 +298,9 @@\n def eliminar_horario(request, id):\n     horario = Horario.objects.get(horario_cod=id)\n     try:\n         horario.delete()\n-        return Response('Asignatura Eliminada')\n+        return Response('')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n @api_view(['DELETE'])\n"
                },
                {
                    "date": 1717871172474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,12 +298,14 @@\n def eliminar_horario(request, id):\n     horario = Horario.objects.get(horario_cod=id)\n     try:\n         horario.delete()\n-        return Response('')\n+        return Response('Horario eliminado.')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    \n+ \n+ \n+   \n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1717871179205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,12 @@\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n  \n  \n-   \n+\"\"\"\n+\n+\n+\"\"\"   \n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1717871184595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -304,10 +304,10 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n  \n  \n \"\"\"\n+            AUSENCIAS\n \n-\n \"\"\"   \n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1717871200125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,8 @@\n     serializer = HorarioSerializer(horarios,many=True)\n     return Response(serializer.data)\n \n \n-#CRUD PARA ASIGNATURAS:\n @api_view(['GET'])\n def asignaturas_list(request):\n     asignaturas = Asignatura.objects.all()\n     serializer= AsignaturaSerializer(asignaturas, many=True)\n"
                },
                {
                    "date": 1717871207729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,9 +324,12 @@\n     horarios = Horario.objects.all()\n     serializer = HorarioSerializer(horarios,many=True)\n     return Response(serializer.data)\n \n-\n+    \"\"\"\n+    \n+    \n+    \"\"\"\n @api_view(['GET'])\n def asignaturas_list(request):\n     asignaturas = Asignatura.objects.all()\n     serializer= AsignaturaSerializer(asignaturas, many=True)\n"
                },
                {
                    "date": 1717871213779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,8 +326,9 @@\n     return Response(serializer.data)\n \n     \"\"\"\n     \n+        ASIGNATURAS\n     \n     \"\"\"\n @api_view(['GET'])\n def asignaturas_list(request):\n"
                },
                {
                    "date": 1717871220632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -329,9 +329,9 @@\n     \n         ASIGNATURAS\n     \n     \"\"\"\n-@api_view(['GET'])\n+@api_view(['GET'])   \n def asignaturas_list(request):\n     asignaturas = Asignatura.objects.all()\n     serializer= AsignaturaSerializer(asignaturas, many=True)\n     return Response(serializer.data)\n"
                },
                {
                    "date": 1717871237977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,14 +318,10 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n        \n     \n \n-@api_view(['GET'])\n-def horarios_list(request):\n-    horarios = Horario.objects.all()\n-    serializer = HorarioSerializer(horarios,many=True)\n-    return Response(serializer.data)\n \n+\n     \"\"\"\n     \n         ASIGNATURAS\n     \n"
                },
                {
                    "date": 1717871266464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,9 @@\n \n     HORARIOS\n \n \"\"\"\n+\n @api_view(['POST'])\n def crear_horario(request):\n     serializer = HorarioSerializerCreate(data=request.data)\n     if serializer.is_valid():\n"
                },
                {
                    "date": 1717871271698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,15 @@\n \n     HORARIOS\n \n \"\"\"\n+@api_view(['GET'])\n+def horarios_list(request):\n+    horarios = Horario.objects.all()\n+    serializer = HorarioSerializer(horarios,many=True)\n+    return Response(serializer.data)\n \n+\n @api_view(['POST'])\n def crear_horario(request):\n     serializer = HorarioSerializerCreate(data=request.data)\n     if serializer.is_valid():\n"
                },
                {
                    "date": 1717871527158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -300,16 +300,26 @@\n         return Response(serializer.data)\n     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n-@api_view(['DELETE'])\n+api_view(['DELETE'])\n def eliminar_horario(request, id):\n-    horario = Horario.objects.get(horario_cod=id)\n+    print(f\"Intentando eliminar horario con id: {id}\")\n     try:\n+        # Intentamos convertir a entero si es necesario y manejamos la excepción si falla\n+        try:\n+            id = int(id)\n+        except ValueError:\n+            pass  # Si falla, continuamos con id como str\n+\n+        horario = Horario.objects.get(horario_cod=id)\n+        print(f\"Horario encontrado: {horario}\")\n         horario.delete()\n-        return Response('Horario eliminado.')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n+        print(f\"Horario eliminado.\")\n+        return Response({'message': 'Horario eliminado.'}, status=status.HTTP_200_OK)\n+    except Horario.DoesNotExist:\n+        print(f\"Horario con id {id} no encontrado.\")\n+        return Response({'error': 'Horario no encontrado.'}, status=status.HTTP_404_NOT_FOUND)\n  \n  \n \"\"\"\n             AUSENCIAS\n"
                },
                {
                    "date": 1717871750330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,27 +299,23 @@\n         serializer.save()\n         return Response(serializer.data)\n     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+from django.views.decorators.csrf import csrf_exempt\n+from rest_framework.decorators import api_view\n \n-api_view(['DELETE'])\n+@csrf_exempt\n+@api_view(['DELETE'])\n def eliminar_horario(request, id):\n-    print(f\"Intentando eliminar horario con id: {id}\")\n     try:\n-        # Intentamos convertir a entero si es necesario y manejamos la excepción si falla\n-        try:\n-            id = int(id)\n-        except ValueError:\n-            pass  # Si falla, continuamos con id como str\n-\n         horario = Horario.objects.get(horario_cod=id)\n-        print(f\"Horario encontrado: {horario}\")\n         horario.delete()\n-        print(f\"Horario eliminado.\")\n         return Response({'message': 'Horario eliminado.'}, status=status.HTTP_200_OK)\n     except Horario.DoesNotExist:\n-        print(f\"Horario con id {id} no encontrado.\")\n         return Response({'error': 'Horario no encontrado.'}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as error:\n+        return Response({'error': repr(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n  \n  \n \"\"\"\n             AUSENCIAS\n"
                },
                {
                    "date": 1717871821880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -299,23 +299,27 @@\n         serializer.save()\n         return Response(serializer.data)\n     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-from django.views.decorators.csrf import csrf_exempt\n-from rest_framework.decorators import api_view\n \n-@csrf_exempt\n-@api_view(['DELETE'])\n+api_view(['DELETE'])\n def eliminar_horario(request, id):\n+    print(f\"Intentando eliminar horario con id: {id}\")\n     try:\n+        # Intentamos convertir a entero si es necesario y manejamos la excepción si falla\n+        try:\n+            id = int(id)\n+        except ValueError:\n+            pass  # Si falla, continuamos con id como str\n+\n         horario = Horario.objects.get(horario_cod=id)\n+        print(f\"Horario encontrado: {horario}\")\n         horario.delete()\n+        print(f\"Horario eliminado.\")\n         return Response({'message': 'Horario eliminado.'}, status=status.HTTP_200_OK)\n     except Horario.DoesNotExist:\n+        print(f\"Horario con id {id} no encontrado.\")\n         return Response({'error': 'Horario no encontrado.'}, status=status.HTTP_404_NOT_FOUND)\n-    except Exception as error:\n-        return Response({'error': repr(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n  \n  \n \"\"\"\n             AUSENCIAS\n"
                },
                {
                    "date": 1717871870528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,10 +301,10 @@\n     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n api_view(['DELETE'])\n-def eliminar_horario(request, id):\n-    print(f\"Intentando eliminar horario con id: {id}\")\n+def eliminar_horario(request, pk):\n+    print(f\"Intentando eliminar horario con id: {pk}\")\n     try:\n         # Intentamos convertir a entero si es necesario y manejamos la excepción si falla\n         try:\n             id = int(id)\n"
                },
                {
                    "date": 1717871876382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n             id = int(id)\n         except ValueError:\n             pass  # Si falla, continuamos con id como str\n \n-        horario = Horario.objects.get(horario_cod=id)\n+        horario = Horario.objects.get(horario_cod=ok)\n         print(f\"Horario encontrado: {horario}\")\n         horario.delete()\n         print(f\"Horario eliminado.\")\n         return Response({'message': 'Horario eliminado.'}, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1717876684365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n             id = int(id)\n         except ValueError:\n             pass  # Si falla, continuamos con id como str\n \n-        horario = Horario.objects.get(horario_cod=ok)\n+        horario = Horario.objects.get(horario_cod=pk)\n         print(f\"Horario encontrado: {horario}\")\n         horario.delete()\n         print(f\"Horario eliminado.\")\n         return Response({'message': 'Horario eliminado.'}, status=status.HTTP_200_OK)\n@@ -324,8 +324,10 @@\n \"\"\"\n             AUSENCIAS\n \n \"\"\"   \n+\n+\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1717876691218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n             AUSENCIAS\n \n \"\"\"   \n \n-\n+@api_view\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1717876697356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,9 @@\n             AUSENCIAS\n \n \"\"\"   \n \n-@api_view\n+@api_view(['GET'])\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1717876702633,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,8 +326,9 @@\n \n \"\"\"   \n \n @api_view(['GET'])\n+\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1717876779673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -325,9 +325,8 @@\n             AUSENCIAS\n \n \"\"\"   \n \n-@api_view(['GET'])\n \n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1717927889499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,8 +416,9 @@\n @api_view(['GET'])\n def profesores_list(request):\n     profesor = Profesor.objects.all()\n     serializer = ProfesorSerializer(profesor, many=True)\n+    pagination\n     return Response(serializer.data)\n \n @api_view(['DELETE'])\n def eliminar_profesor(request, id):\n"
                },
                {
                    "date": 1717927897421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -416,9 +416,9 @@\n @api_view(['GET'])\n def profesores_list(request):\n     profesor = Profesor.objects.all()\n     serializer = ProfesorSerializer(profesor, many=True)\n-    pagination\n+    pagination_class = None\n     return Response(serializer.data)\n \n @api_view(['DELETE'])\n def eliminar_profesor(request, id):\n"
                },
                {
                    "date": 1718294361063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -652,8 +652,11 @@\n         profesor.delete()\n         return Response('Profesor eliminado.')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n+\n #CRUD AULA:\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n"
                },
                {
                    "date": 1718294373060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -635,28 +635,15 @@\n     \n     \n     \n \n+    \"\"\"\n     \n-@api_view(['GET'])\n-def profesores_obtener(request,id):\n-    asignatura = Profesor.objects.get(profesor_cod=id)\n-    serializer= ProfesorSerializer(asignatura)\n-    return Response(serializer.data)\n     \n \n-\n-@api_view(['DELETE'])\n-def eliminar_profesor(request, id):\n-    profesor = Profesor.objects.get(profesor_cod=id)\n-    try:\n-        profesor.delete()\n-        return Response('Profesor eliminado.')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n-\n-\n+    Returns:\n+        _type_: _description_\n+    \"\"\"\n #CRUD AULA:\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n"
                },
                {
                    "date": 1718294380006,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -637,9 +637,9 @@\n     \n \n     \"\"\"\n     \n-    \n+    CRUD PROFESORES:\n \n     Returns:\n         _type_: _description_\n     \"\"\"\n"
                },
                {
                    "date": 1718294386829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -639,11 +639,60 @@\n     \"\"\"\n     \n     CRUD PROFESORES:\n \n-    Returns:\n-        _type_: _description_\n     \"\"\"\n+    \n+@api_view(['GET'])\n+def obtener_profesor(request, profesor_cod):\n+    try:\n+        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+        serializer = ProfesorSerializer(profesor)\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n+    except Profesor.DoesNotExist:\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+@api_view(['POST'])\n+def crear_profesor(request):\n+    serializer = ProfesorSerializerCreate(data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            return Response(\"Profesor creado exitosamente.\", status=status.HTTP_201_CREATED)\n+        except serializers.ValidationError as error:\n+            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n+        except Exception as error:\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+@api_view(['PUT'])\n+def editar_profesor(request, profesor_cod):\n+    try:\n+        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+    except Profesor.DoesNotExist:\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+    serializer = ProfesorSerializerCreate(profesor, data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            return Response(\"Profesor actualizado exitosamente.\", status=status.HTTP_200_OK)\n+        except Exception as error:\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+@api_view(['DELETE'])\n+def eliminar_profesor(request, profesor_cod):\n+    try:\n+        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+        profesor.delete()\n+        return Response(\"Profesor eliminado exitosamente.\", status=status.HTTP_200_OK)\n+    except Profesor.DoesNotExist:\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as error:\n+        return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n #CRUD AULA:\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n"
                },
                {
                    "date": 1718294394656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -691,8 +691,11 @@\n     except Profesor.DoesNotExist:\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n     except Exception as error:\n         return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n+\n #CRUD AULA:\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n"
                },
                {
                    "date": 1718294401826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,9 +694,9 @@\n         return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n \n \n-#CRUD AULA:\n+\"\"\"\"\"\"\"\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n    serializer= AulaSerializer(aulas, many=True)\n"
                },
                {
                    "date": 1718294409246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,9 +694,13 @@\n         return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n \n \n-\"\"\"\"\"\"\"\n+\"\"\"\n+\n+    crud\n+\n+\"\"\"\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n    serializer= AulaSerializer(aulas, many=True)\n"
                },
                {
                    "date": 1718294415661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -696,9 +696,9 @@\n \n \n \"\"\"\n \n-    crud\n+    CRUD AULAS:\n \n \"\"\"\n @api_view(['GET'])\n def aulas_list(request):\n"
                },
                {
                    "date": 1718294434620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -781,51 +781,9 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n \n     \n-#CRUD AUSENCIA:\n-@api_view(['DELETE'])\n-def eliminar_ausencia(request, id):\n-    ausencia = Ausencia.objects.get(franja_cod=id)\n-    try:\n-        ausencia.delete()\n-        return Response('Ausencia eliminada')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n-    \n-     \n \n-\n-\n- \n-#CRUD PROFESORES:\n-@api_view(['GET'])\n-def profesores_list(request):\n-   profesores = Profesor.objects.all()\n-   serializer = ProfesorSerializer(profesores, many=True)\n-   return Response(serializer.data)\n-\n-\n-@api_view(['GET'])\n-def obtener_profesor(request,id):\n-    profesor = Profesor.objects.select_related('usuario')\n-    profesor = profesor.get(profesor_cod=id)\n-    \n-    \n-\n-@api_view(['POST'])\n-def crear_profesor(request):\n-    pass\n-\n-@api_view(['DELETE'])\n-def eliminar_profesor(request, id):\n-    profesor = Profesor.objects.get(franja_cod=id)\n-    try:\n-        profesor.delete()\n-        return Response('Profesor eliminado-')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n-    \n #CRUD AUSENCIA:\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1718294440747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -782,9 +782,8 @@\n     \n \n     \n \n-#CRUD AUSENCIA:\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1718294446769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -781,9 +781,14 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n \n     \n+    \"\"\"\n+    \n \n+    Returns:\n+        _type_: _description_\n+    \"\"\"\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1718294452444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -784,10 +784,9 @@\n     \n     \"\"\"\n     \n \n-    Returns:\n-        _type_: _description_\n+\n     \"\"\"\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1718294458183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -783,10 +783,10 @@\n \n     \n     \"\"\"\n     \n+        CRUD\n \n-\n     \"\"\"\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n"
                },
                {
                    "date": 1718294465337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -783,11 +783,13 @@\n \n     \n     \"\"\"\n     \n-        CRUD\n+        CRUD AUSENCIAS:\n \n     \"\"\"\n+    \n+\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1718294476080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -787,11 +787,60 @@\n         CRUD AUSENCIAS:\n \n     \"\"\"\n     \n+@api_view(['GET'])\n+def obtener_ausencia(request, id):\n+    try:\n+        ausencia = Ausencia.objects.get(id=id)\n+        serializer = AusenciaSerializer(ausencia)\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n+    except Ausencia.DoesNotExist:\n+        return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n \n+@api_view(['POST'])\n+def crear_ausencia(request):\n+    serializer = AusenciaSerializerCreate(data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            return Response(\"Ausencia creada exitosamente.\", status=status.HTTP_201_CREATED)\n+        except serializers.ValidationError as error:\n+            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n+        except Exception as error:\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+@api_view(['PUT'])\n+def editar_ausencia(request, id):\n+    try:\n+        ausencia = Ausencia.objects.get(id=id)\n+    except Ausencia.DoesNotExist:\n+        return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+    serializer = AusenciaSerializerCreate(ausencia, data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            return Response(\"Ausencia actualizada exitosamente.\", status=status.HTTP_200_OK)\n+        except Exception as error:\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n @api_view(['DELETE'])\n def eliminar_ausencia(request, id):\n+    try:\n+        ausencia = Ausencia.objects.get(id=id)\n+        ausencia.delete()\n+        return Response(\"Ausencia eliminada exitosamente.\", status=status.HTTP_200_OK)\n+    except Ausencia.DoesNotExist:\n+        return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as error:\n+        return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+@api_view(['DELETE'])\n+def eliminar_ausencia(request, id):\n     ausencia = Ausencia.objects.get(franja_cod=id)\n     try:\n         ausencia.delete()\n         return Response('Ausencia eliminada')\n"
                },
                {
                    "date": 1718298528805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -937,22 +937,8 @@\n \n \n \n \n-# # Procesar datos de ausencias\n-# for table in root.findall(\".//table[@name='ausencias']\"):\n-#     for column in table.findall('column'):\n-#         ausencia_data = {column.get('name'): column.text for column in table.findall('column')}\n-#         # Procesa los datos de ausencias y guárdalos en el modelo Asistencia\n-#         # Puedes adaptar esta lógica según la estructura de tus datos de ausencias y tu modelo Asistencia\n-#         # Por ejemplo:\n-#         fecha = ausencia_data.get('fecha')\n-#         motivo = ausencia_data.get('motivo')\n-#         alumno_cod = ausencia_data.get('alumno_cod')\n-\n-#         # Aquí deberías guardar los datos de ausencias en tu modelo Asistencia\n-#         # Por ejemplo:\n-#         Asistencia.objects.create(fecha=fecha, motivo=motivo, alumno_cod=alumno_cod)\n @api_view(['POST'])\n def vaciar_base_de_datos(request):\n     try:\n         # Eliminar todos los registros de las tablas correspondientes\n"
                },
                {
                    "date": 1718298858412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,9 +846,9 @@\n         return Response('Ausencia eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n-     \n+     \"\"\"\"\"\"\n \n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n"
                },
                {
                    "date": 1718298870750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,9 +846,9 @@\n         return Response('Ausencia eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n-     \"\"\"\"\"\"\n+     \"\"\" USUARIOS \"\"\"\n \n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n"
                },
                {
                    "date": 1718298877899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,9 +846,13 @@\n         return Response('Ausencia eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n-     \"\"\" USUARIOS \"\"\"\n+     \"\"\" \n+     \n+     USUARIOS\n+     \n+     \"\"\"\n \n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n"
                },
                {
                    "date": 1718298883954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,13 +846,13 @@\n         return Response('Ausencia eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n-     \"\"\" \n+    \"\"\" \n      \n      USUARIOS\n      \n-     \"\"\"\n+    \"\"\"\n \n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n"
                },
                {
                    "date": 1718298967116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,15 +846,19 @@\n         return Response('Ausencia eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n-    \"\"\" \n+\"\"\" \n      \n      USUARIOS\n      \n     \"\"\"\n+@api_view(['GET'])\n+def usuarios_list(request):\n+    usuarios = Usuario.objects.all()\n+    serializer = UsuarioSerializer(usuarios, many=True)\n+    return Response(serializer.data)\n \n-\n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n \n @api_view(['GET'])\n"
                },
                {
                    "date": 1718299316248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -850,13 +850,13 @@\n \"\"\" \n      \n      USUARIOS\n      \n-    \"\"\"\n+\"\"\"\n @api_view(['GET'])\n def usuarios_list(request):\n     usuarios = Usuario.objects.all()\n-    serializer = UsuarioSerializer(usuarios, many=True)\n+    serializer = Profeusuarios, many=True)\n     return Response(serializer.data)\n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n"
                },
                {
                    "date": 1718299322489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -854,9 +854,9 @@\n \"\"\"\n @api_view(['GET'])\n def usuarios_list(request):\n     usuarios = Usuario.objects.all()\n-    serializer = Profeusuarios, many=True)\n+    serializer = ProfesorSerializerMejorado(usuarios, many=True)\n     return Response(serializer.data)\n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n"
                },
                {
                    "date": 1718299354964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,9 +853,9 @@\n      \n \"\"\"\n @api_view(['GET'])\n def usuarios_list(request):\n-    usuarios = Usuario.objects.all()\n+    usuarios = Profesor.objects.all()\n     serializer = ProfesorSerializerMejorado(usuarios, many=True)\n     return Response(serializer.data)\n \n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n"
                },
                {
                    "date": 1718299514089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -857,8 +857,14 @@\n     usuarios = Profesor.objects.all()\n     serializer = ProfesorSerializerMejorado(usuarios, many=True)\n     return Response(serializer.data)\n \n+@api_view(['GET'])\n+def usuarios_list(request):\n+    usuarios = Usuario.objects.all()\n+    serializer = UsuarioSerializer(usuarios, many=True)\n+    return Response(serializer.data)\n+\n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n \n @api_view(['GET'])\n"
                },
                {
                    "date": 1718299526142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -853,14 +853,8 @@\n      \n \"\"\"\n @api_view(['GET'])\n def usuarios_list(request):\n-    usuarios = Profesor.objects.all()\n-    serializer = ProfesorSerializerMejorado(usuarios, many=True)\n-    return Response(serializer.data)\n-\n-@api_view(['GET'])\n-def usuarios_list(request):\n     usuarios = Usuario.objects.all()\n     serializer = UsuarioSerializer(usuarios, many=True)\n     return Response(serializer.data)\n \n"
                },
                {
                    "date": 1718300886192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -799,8 +799,9 @@\n \n @api_view(['POST'])\n def crear_ausencia(request):\n     serializer = AusenciaSerializerCreate(data=request.data)\n+    print(serializer)\n     if serializer.is_valid():\n         try:\n             serializer.save()\n             return Response(\"Ausencia creada exitosamente.\", status=status.HTTP_201_CREATED)\n"
                },
                {
                    "date": 1718301284941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -796,22 +796,8 @@\n         return Response(serializer.data, status=status.HTTP_200_OK)\n     except Ausencia.DoesNotExist:\n         return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-@api_view(['POST'])\n-def crear_ausencia(request):\n-    serializer = AusenciaSerializerCreate(data=request.data)\n-    print(serializer)\n-    if serializer.is_valid():\n-        try:\n-            serializer.save()\n-            return Response(\"Ausencia creada exitosamente.\", status=status.HTTP_201_CREATED)\n-        except serializers.ValidationError as error:\n-            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n-        except Exception as error:\n-            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n"
                },
                {
                    "date": 1718301298908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+from pyexpat.errors import messages\n from .models import *\n from .serializers import *\n from rest_framework.response import Response\n from rest_framework.decorators import api_view\n@@ -796,9 +797,26 @@\n         return Response(serializer.data, status=status.HTTP_200_OK)\n     except Ausencia.DoesNotExist:\n         return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-\n+@api_view(['POST'])\n+def crear_ausencia(request):\n+    serializer = AusenciaSerializerCreate(data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            messages.success(request, \"Ausencia creada exitosamente.\")\n+            return Response(\"Ausencia creada exitosamente.\", status=status.HTTP_201_CREATED)\n+        except serializers.ValidationError as error:\n+            messages.error(request, \"Error de validación.\")\n+            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n+        except Exception as error:\n+            messages.error(request, f\"Error al crear la ausencia: {str(error)}\")\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        messages.error(request, \"Datos inválidos.\")\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+    \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718301343835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,29 +319,11 @@\n         return Response({'message': 'Horario eliminado.'}, status=status.HTTP_200_OK)\n     except Horario.DoesNotExist:\n         print(f\"Horario con id {id} no encontrado.\")\n         return Response({'error': 'Horario no encontrado.'}, status=status.HTTP_404_NOT_FOUND)\n- \n- \n-\"\"\"\n-            AUSENCIAS\n \n-\"\"\"   \n \n \n-@api_view(['DELETE'])\n-def eliminar_ausencia(request, id):\n-    ausencia = Ausencia.objects.get(franja_cod=id)\n-    try:\n-        ausencia.delete()\n-        return Response('Ausencia eliminada')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n-       \n-    \n-\n-\n-\n     \"\"\"\n     \n         ASIGNATURAS\n     \n"
                },
                {
                    "date": 1718301350954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,13 +322,13 @@\n         return Response({'error': 'Horario no encontrado.'}, status=status.HTTP_404_NOT_FOUND)\n \n \n \n-    \"\"\"\n+\"\"\"\n     \n         ASIGNATURAS\n     \n-    \"\"\"\n+\"\"\"\n @api_view(['GET'])   \n def asignaturas_list(request):\n     asignaturas = Asignatura.objects.all()\n     serializer= AsignaturaSerializer(asignaturas, many=True)\n"
                },
                {
                    "date": 1718301365306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -324,9 +324,9 @@\n \n \n \"\"\"\n     \n-        ASIGNATURAS\n+ASIGNATURAS\n     \n \"\"\"\n @api_view(['GET'])   \n def asignaturas_list(request):\n@@ -388,32 +388,10 @@\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n     \n-#CRUD PROFESORES:  \n-@api_view(['GET'])\n-def profesores_obtener(request,id):\n-    asignatura = Profesor.objects.get(profesor_cod=id)\n-    serializer= ProfesorSerializer(asignatura)\n-    return Response(serializer.data)\n-    \n-@api_view(['GET'])\n-def profesores_list(request):\n-    profesor = Profesor.objects.all()\n-    serializer = ProfesorSerializer(profesor, many=True)\n-    pagination_class = None\n-    return Response(serializer.data)\n+  \n \n-@api_view(['DELETE'])\n-def eliminar_profesor(request, id):\n-    profesor = Profesor.objects.get(profesor_cod=id)\n-    try:\n-        profesor.delete()\n-        return Response('Profesor eliminado.')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    \n-\n #CRUD AULA:\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n"
                },
                {
                    "date": 1718301378543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,10 +388,32 @@\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n     \n-  \n+#CRUD PROFESORES:  \n+@api_view(['GET'])\n+def profesores_obtener(request,id):\n+    asignatura = Profesor.objects.get(profesor_cod=id)\n+    serializer= ProfesorSerializer(asignatura)\n+    return Response(serializer.data)\n+    \n+@api_view(['GET'])\n+def profesores_list(request):\n+    profesor = Profesor.objects.all()\n+    serializer = ProfesorSerializer(profesor, many=True)\n+    pagination_class = None\n+    return Response(serializer.data)\n \n+@api_view(['DELETE'])\n+def eliminar_profesor(request, id):\n+    profesor = Profesor.objects.get(profesor_cod=id)\n+    try:\n+        profesor.delete()\n+        return Response('Profesor eliminado.')\n+    except Exception as error:\n+        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    \n+\n #CRUD AULA:\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n"
                },
                {
                    "date": 1718301386016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,10 +387,9 @@\n         return Response('Asignatura Eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n-    \n-#CRUD PROFESORES:  \n+\"\"\"\"\"\" \n @api_view(['GET'])\n def profesores_obtener(request,id):\n     asignatura = Profesor.objects.get(profesor_cod=id)\n     serializer= ProfesorSerializer(asignatura)\n"
                },
                {
                    "date": 1718301393698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -387,9 +387,11 @@\n         return Response('Asignatura Eliminada')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n-\"\"\"\"\"\" \n+\"\"\" \n+PROFESORES\n+\"\"\" \n @api_view(['GET'])\n def profesores_obtener(request,id):\n     asignatura = Profesor.objects.get(profesor_cod=id)\n     serializer= ProfesorSerializer(asignatura)\n"
                },
                {
                    "date": 1718301406770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -412,10 +412,14 @@\n         return Response('Profesor eliminado.')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n+    \"\"\"\n+    \n \n-#CRUD AULA:\n+    Returns:\n+        _type_: _description_\n+    \"\"\"\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n    serializer= AulaSerializer(aulas, many=True)\n"
                },
                {
                    "date": 1718301412016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -412,14 +412,14 @@\n         return Response('Profesor eliminado.')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n-    \"\"\"\n+\"\"\"\n     \n \n     Returns:\n         _type_: _description_\n-    \"\"\"\n+\"\"\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n    serializer= AulaSerializer(aulas, many=True)\n"
                },
                {
                    "date": 1718301417366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -415,11 +415,9 @@\n     \n \"\"\"\n     \n \n-    Returns:\n-        _type_: _description_\n-\"\"\n+\"\"\"\n @api_view(['GET'])\n def aulas_list(request):\n    aulas = Aula.objects.all()\n    serializer= AulaSerializer(aulas, many=True)\n"
                },
                {
                    "date": 1718301426214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -414,8 +414,9 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n \"\"\"\n     \n+AULA\n \n \"\"\"\n @api_view(['GET'])\n def aulas_list(request):\n@@ -465,9 +466,9 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n \n \n-#CRUD GRUPOS:\n+\n @api_view(['GET'])\n def grupos_list(request):\n     grupos = Grupo.objects.all()\n     serializer = GrupoSerializer(grupos, many=True)\n"
                },
                {
                    "date": 1718301432164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,9 +466,9 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n \n \n-\n+\"\"\"GRUPOS\"\"\"\n @api_view(['GET'])\n def grupos_list(request):\n     grupos = Grupo.objects.all()\n     serializer = GrupoSerializer(grupos, many=True)\n"
                },
                {
                    "date": 1718301439440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,18 +466,19 @@\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n \n \n-\"\"\"GRUPOS\"\"\"\n+\"\"\"\n+GRUPOS\n+\n+\"\"\"\n @api_view(['GET'])\n def grupos_list(request):\n     grupos = Grupo.objects.all()\n     serializer = GrupoSerializer(grupos, many=True)\n     return Response(serializer.data)\n \n \n-\n-\n @api_view(['DELETE'])\n def eliminar_grupo(request, id):\n     grupo = Grupo.objects.get(grupo_cod=id)\n     try:\n"
                },
                {
                    "date": 1718301446315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -476,9 +476,8 @@\n     grupos = Grupo.objects.all()\n     serializer = GrupoSerializer(grupos, many=True)\n     return Response(serializer.data)\n \n-\n @api_view(['DELETE'])\n def eliminar_grupo(request, id):\n     grupo = Grupo.objects.get(grupo_cod=id)\n     try:\n@@ -486,10 +485,9 @@\n         return Response('Grupo eliminado-')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n-    \n-#CRUD FRANJAS:\n+\n @api_view(['DELETE'])\n def eliminar_franja(request, id):\n     franja = Franja.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1718301453844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,9 +485,9 @@\n         return Response('Grupo eliminado-')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n-\n+\"\"\" FRANJAS \"\"\"\n @api_view(['DELETE'])\n def eliminar_franja(request, id):\n     franja = Franja.objects.get(franja_cod=id)\n     try:\n"
                },
                {
                    "date": 1718301461844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -485,9 +485,12 @@\n         return Response('Grupo eliminado-')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n-\"\"\" FRANJAS \"\"\"\n+\"\"\" \n+FRANJAS \n+\n+\"\"\"\n @api_view(['DELETE'])\n def eliminar_franja(request, id):\n     franja = Franja.objects.get(franja_cod=id)\n     try:\n@@ -495,10 +498,8 @@\n         return Response('Franja eliminado-')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n \n-\n-\n @api_view(['GET'])\n def franjas_list(request):\n     franjas = Franja.objects.all()\n     serializer = FranjaSerializer(franjas,many=True)\n"
                },
                {
                    "date": 1718301500298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,120 +510,10 @@\n     xml_file_path = os.path.join(settings.BASE_DIR, 'datos.xml')\n     \n     return FileResponse(open(xml_file_path, 'rb'))\n \n-#CRUD PARA ASIGNATURAS:\n-@api_view(['GET'])\n-def asignaturas_list(request):\n-    asignaturas = Asignatura.objects.all()\n-    serializer= AsignaturaSerializer(asignaturas, many=True)\n-    return Response(serializer.data)\n-# @api_view(['GET'])\n-# def asignaturas_list(request):\n-#     try:\n-#         # Parsear el archivo XML\n-#         tree = ET.parse(settings.XML_FILE_PATH)\n-#         root = tree.getroot()\n \n-#         # Obtener los datos de la tabla de asignaturas del archivo XML\n-#         asignaturas_data = []\n-#         for table in root.findall(\".//table[@name='asignaturas']\"):\n-#             asignatura_data = {}\n-#             for column in table.findall('column'):\n-#                 asignatura_data[column.get('name')] = column.text\n-#             asignaturas_data.append(asignatura_data)\n \n-#         # Guardar las asignaturas en la base de datos\n-#         for asignatura_data in asignaturas_data:\n-#             # Intentar obtener la asignatura existente por su código\n-#             asignatura, created = Asignatura.objects.update_or_create(\n-#                 asignatura_cod=asignatura_data.get('asignatura_cod'),\n-#                 defaults={'descripcion': asignatura_data.get('descripcion')}\n-#             )\n-        \n-#         # Serializar las asignaturas para devolverlas como respuesta\n-#         serializer = AsignaturaSerializer(Asignatura.objects.all(), many=True)\n-\n-#         # Devolver los datos serializados\n-#         return Response(serializer.data, status=status.HTTP_200_OK)\n-#     except FileNotFoundError:\n-#         return Response(\"El archivo XML no se encontró.\", status=status.HTTP_404_NOT_FOUND)\n-#     except Exception as e:\n-#         return Response(str(e), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-     \n-@api_view(['GET'])\n-def asignaturas_obtener(request,asignatura_cod):\n-    asignatura = Asignatura.objects.get(asignatura_cod=asignatura_cod)\n-    serializer= AsignaturaSerializer(asignatura)\n-    return Response(serializer.data)\n-\n-@api_view(['POST'])\n-def crear_asignatura(request):\n-    print(request.data)\n-    serializer = AsignaturaSerializerCreate(data=request.data)\n-    if serializer.is_valid():\n-        try:\n-            serializer.save()\n-            return Response(\"ASIGNATURA CREADA\", status=status.HTTP_200_OK)\n-        except serializers.ValidationError as error:\n-            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n-        except Exception as error:\n-            print(repr(error))\n-            return Response(repr(error), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-\n-# @api_view(['PUT'])\n-# def editar_asignatura(request, asignatura_cod):\n-#     asignatura = Asignatura.objects.get(asignatura_cod=asignatura_cod)\n-#     #data[\"asignatura_cod\"] = asignatura_cod\n-#     asignaturaCreateSerializer = AsignaturaSerializerCreate(data=request.data, instance=asignatura)\n-#     if asignaturaCreateSerializer.is_valid():\n-#         try:\n-#             asignaturaCreateSerializer.save()\n-#             return Response(\"Asignatura EDITADA\")\n-#         except serializers.ValidationError as error:\n-#             return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n-#         except Exception as error:\n-#             return Response(repr(error), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-#     else:\n-#         return Response(asignaturaCreateSerializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-    \n-@api_view(['GET', 'PUT'])\n-def editar_asignatura(request, id):\n-    try:\n-        asignatura = Asignatura.objects.get(asignatura_cod=id)\n-    except Asignatura.DoesNotExist:\n-        return Response({\"error\": \"Asignatura no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n-    \n-    if request.method == 'GET':\n-        serializer = AsignaturaSerializerCreate(asignatura)\n-        return Response(serializer.data)\n-    \n-    elif request.method == 'PUT':\n-        serializer = AsignaturaSerializerCreate(asignatura, data=request.data)\n-        if serializer.is_valid():\n-            try:\n-                serializer.save()\n-                return Response(\"Asignatura actualizada.\", status=status.HTTP_200_OK)\n-            except Exception as error:\n-                return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-@api_view(['DELETE'])\n-def eliminar_asignatura(request, id):\n-    asignatura = Asignatura.objects.get(asignatura_cod=id)\n-    try:\n-        asignatura.delete()\n-        return Response('Asignatura Eliminada')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    \n-    \n-    \n-\n     \"\"\"\n     \n     CRUD PROFESORES:\n \n"
                },
                {
                    "date": 1718301505332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,13 +510,11 @@\n     xml_file_path = os.path.join(settings.BASE_DIR, 'datos.xml')\n     \n     return FileResponse(open(xml_file_path, 'rb'))\n \n-\n-\n-    \"\"\"\n+\"\"\"\n     \n-    CRUD PROFESORES:\n+CRUD PROFESORES:\n \n     \"\"\"\n     \n @api_view(['GET'])\n"
                },
                {
                    "date": 1718301526546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -514,63 +514,12 @@\n \"\"\"\n     \n CRUD PROFESORES:\n \n-    \"\"\"\n+\"\"\"\n     \n-@api_view(['GET'])\n-def obtener_profesor(request, profesor_cod):\n-    try:\n-        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n-        serializer = ProfesorSerializer(profesor)\n-        return Response(serializer.data, status=status.HTTP_200_OK)\n-    except Profesor.DoesNotExist:\n-        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-@api_view(['POST'])\n-def crear_profesor(request):\n-    serializer = ProfesorSerializerCreate(data=request.data)\n-    if serializer.is_valid():\n-        try:\n-            serializer.save()\n-            return Response(\"Profesor creado exitosamente.\", status=status.HTTP_201_CREATED)\n-        except serializers.ValidationError as error:\n-            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n-        except Exception as error:\n-            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n-@api_view(['PUT'])\n-def editar_profesor(request, profesor_cod):\n-    try:\n-        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n-    except Profesor.DoesNotExist:\n-        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n-\n-    serializer = ProfesorSerializerCreate(profesor, data=request.data)\n-    if serializer.is_valid():\n-        try:\n-            serializer.save()\n-            return Response(\"Profesor actualizado exitosamente.\", status=status.HTTP_200_OK)\n-        except Exception as error:\n-            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-\n-@api_view(['DELETE'])\n-def eliminar_profesor(request, profesor_cod):\n-    try:\n-        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n-        profesor.delete()\n-        return Response(\"Profesor eliminado exitosamente.\", status=status.HTTP_200_OK)\n-    except Profesor.DoesNotExist:\n-        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n-    except Exception as error:\n-        return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-\n-\n-\n \"\"\"\n \n     CRUD AULAS:\n \n"
                },
                {
                    "date": 1718301532020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -511,17 +511,9 @@\n     \n     return FileResponse(open(xml_file_path, 'rb'))\n \n \"\"\"\n-    \n-CRUD PROFESORES:\n \n-\"\"\"\n-    \n-\n-\n-\"\"\"\n-\n     CRUD AULAS:\n \n \"\"\"\n @api_view(['GET'])\n"
                },
                {
                    "date": 1718301538367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -411,9 +411,11 @@\n         profesor.delete()\n         return Response('Profesor eliminado.')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    \n+\n+\n+\n \"\"\"\n     \n AULA\n \n"
                },
                {
                    "date": 1718301560347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -413,9 +413,60 @@\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n \n+@api_view(['GET'])\n+def obtener_profesor(request, profesor_cod):\n+    try:\n+        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+        serializer = ProfesorSerializer(profesor)\n+        return Response(serializer.data, status=status.HTTP_200_OK)\n+    except Profesor.DoesNotExist:\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n \n+@api_view(['POST'])\n+def crear_profesor(request):\n+    serializer = ProfesorSerializerCreate(data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            return Response(\"Profesor creado exitosamente.\", status=status.HTTP_201_CREATED)\n+        except serializers.ValidationError as error:\n+            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n+        except Exception as error:\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+@api_view(['PUT'])\n+def editar_profesor(request, profesor_cod):\n+    try:\n+        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+    except Profesor.DoesNotExist:\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+\n+    serializer = ProfesorSerializerCreate(profesor, data=request.data)\n+    if serializer.is_valid():\n+        try:\n+            serializer.save()\n+            return Response(\"Profesor actualizado exitosamente.\", status=status.HTTP_200_OK)\n+        except Exception as error:\n+            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+@api_view(['DELETE'])\n+def eliminar_profesor(request, profesor_cod):\n+    try:\n+        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+        profesor.delete()\n+        return Response(\"Profesor eliminado exitosamente.\", status=status.HTTP_200_OK)\n+    except Profesor.DoesNotExist:\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as error:\n+        return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n+\n \"\"\"\n     \n AULA\n \n@@ -598,15 +649,13 @@\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n     \n \n+\"\"\"\n     \n+CRUD AUSENCIAS:\n     \"\"\"\n     \n-        CRUD AUSENCIAS:\n-\n-    \"\"\"\n-    \n @api_view(['GET'])\n def obtener_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718301573297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -617,29 +617,10 @@\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n \n-\n-#CRUD GRUPOS:\n-@api_view(['GET'])\n-def grupos_list(request):\n-    grupos = Grupo.objects.all()\n-    serializer = GrupoSerializer(grupos, many=True)\n-    return Response(serializer.data)\n-\n-\n-\n-\n-@api_view(['DELETE'])\n-def eliminar_grupo(request, id):\n-    grupo = Grupo.objects.get(grupo_cod=id)\n-    try:\n-        grupo.delete()\n-        return Response('Grupo eliminado-')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n+   \n     \n-    \n #CRUD FRANJAS:\n @api_view(['DELETE'])\n def eliminar_franja(request, id):\n     franja = Franja.objects.get(franja_cod=id)\n@@ -652,9 +633,10 @@\n \n \"\"\"\n     \n CRUD AUSENCIAS:\n-    \"\"\"\n+\n+\"\"\"\n     \n @api_view(['GET'])\n def obtener_ausencia(request, id):\n     try:\n"
                },
                {
                    "date": 1718305853751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -614,24 +614,11 @@\n     try:\n         aula.delete()\n         return Response('Aula eliminada')\n     except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n+        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_E\n     \n \n-   \n-    \n-#CRUD FRANJAS:\n-@api_view(['DELETE'])\n-def eliminar_franja(request, id):\n-    franja = Franja.objects.get(franja_cod=id)\n-    try:\n-        franja.delete()\n-        return Response('Franja eliminado-')\n-    except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n-    \n-\n \"\"\"\n     \n CRUD AUSENCIAS:\n \n"
                },
                {
                    "date": 1718305869407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -557,9 +557,16 @@\n     franjas = Franja.objects.all()\n     serializer = FranjaSerializer(franjas,many=True)\n     return Response(serializer.data)\n \n-\n+@api_view(['DELETE'])\n+def eliminar_franja(request, id):\n+    franja = Franja.objects.get(franja_cod=id)\n+    try:\n+        franja.delete()\n+        return Response('Franja eliminado-')\n+    except Exception as error:\n+        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n def xml_data_view(request):\n     xml_file_path = os.path.join(settings.BASE_DIR, 'datos.xml')\n     \n     return FileResponse(open(xml_file_path, 'rb'))\n@@ -614,9 +621,10 @@\n     try:\n         aula.delete()\n         return Response('Aula eliminada')\n     except Exception as error:\n-        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_E\n+        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n+\n     \n \n \"\"\"\n     \n"
                },
                {
                    "date": 1718306043458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -565,8 +565,9 @@\n         franja.delete()\n         return Response('Franja eliminado-')\n     except Exception as error:\n         return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n+    \n def xml_data_view(request):\n     xml_file_path = os.path.join(settings.BASE_DIR, 'datos.xml')\n     \n     return FileResponse(open(xml_file_path, 'rb'))\n@@ -657,9 +658,10 @@\n             return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n     else:\n         messages.error(request, \"Datos inválidos.\")\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-    \n+\n+  \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718308164103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from pyexpat.errors import messages\n from .models import *\n-from .serializers import *\n+ from .serializers import *\n from rest_framework.response import Response\n from rest_framework.decorators import api_view\n from django.http import FileResponse, HttpResponse\n from .serializers import *\n"
                },
                {
                    "date": 1718317556437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from pyexpat.errors import messages\n from .models import *\n- from .serializers import *\n+from .serializers import *\n from rest_framework.response import Response\n from rest_framework.decorators import api_view\n from django.http import FileResponse, HttpResponse\n from .serializers import *\n@@ -707,8 +707,18 @@\n     usuarios = Usuario.objects.all()\n     serializer = UsuarioSerializer(usuarios, many=True)\n     return Response(serializer.data)\n \n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n \"\"\" F U N C I O N A L I D A D E S\"\"\"\n #Filtrar horarios por profesor:\n \n @api_view(['GET'])\n"
                },
                {
                    "date": 1718318159395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,17 +424,12 @@\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n \n @api_view(['POST'])\n def crear_profesor(request):\n-    serializer = ProfesorSerializerCreate(data=request.data)\n+    serializer = ProfesorSerializer(data=request.data)\n     if serializer.is_valid():\n-        try:\n-            serializer.save()\n-            return Response(\"Profesor creado exitosamente.\", status=status.HTTP_201_CREATED)\n-        except serializers.ValidationError as error:\n-            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n-        except Exception as error:\n-            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+        serializer.save()\n+        return Response({\"message\": \"Profesor creado exitosamente.\"}, status=status.HTTP_201_CREATED)\n     else:\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n @api_view(['PUT'])\n"
                },
                {
                    "date": 1718320665112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -424,17 +424,17 @@\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n \n @api_view(['POST'])\n def crear_profesor(request):\n-    serializer = ProfesorSerializer(data=request.data)\n+    serializer = ProfesorSerializerCreate(data=request.data)\n     if serializer.is_valid():\n         serializer.save()\n         return Response({\"message\": \"Profesor creado exitosamente.\"}, status=status.HTTP_201_CREATED)\n     else:\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n @api_view(['PUT'])\n-def editar_profesor(request, profesor_cod):\n+def editar_profesor(request, id):\n     try:\n         profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n     except Profesor.DoesNotExist:\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n"
                },
                {
                    "date": 1718413628299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,9 +434,9 @@\n \n @api_view(['PUT'])\n def editar_profesor(request, id):\n     try:\n-        profesor = Profesor.objects.get(profesor_cod=profesor_cod)\n+        profesor = Profesor.objects.get(profesor_cod=id)\n     except Profesor.DoesNotExist:\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n \n     serializer = ProfesorSerializerCreate(profesor, data=request.data)\n@@ -792,16 +792,30 @@\n \n \n \n \n+from rest_framework_simplejwt.views import TokenObtainPairView\n+from rest_framework_simplejwt.serializers import TokenObtainPairSerializer\n+from rest_framework import serializers\n \n+class CustomTokenObtainPairSerializer(TokenObtainPairSerializer):\n+    @classmethod\n+    def get_token(cls, user):\n+        token = super().get_token(user)\n+        # Añade datos adicionales al token aquí, si es necesario\n+        token['username'] = user.username\n+        return token\n \n+class CustomTokenObtainPairView(TokenObtainPairView):\n+    serializer_class = CustomTokenObtainPairSerializer\n \n \n \n \n \n \n+\n+\n @api_view(['POST'])\n def vaciar_base_de_datos(request):\n     try:\n         # Eliminar todos los registros de las tablas correspondientes\n"
                },
                {
                    "date": 1718456608066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n             email = f\"{profesor_cod.lower()}@example.com\"  # Email predeterminado\n \n             # Crear el usuario asociado si no existe\n             usuario, created = Usuario.objects.get_or_create(username=profesor_cod, defaults={\n-                'password': Usuario.objects.make_random_password(),\n+                'password': make_password('iespsur'),\n                 'rol': Usuario.PROFESOR\n             })\n \n             if created:\n"
                },
                {
                    "date": 1718456623017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n from rest_framework.views import APIView\n from rest_framework.decorators import api_view, parser_classes\n from rest_framework.parsers import MultiPartParser, FormParser\n from django.contrib.auth.models import User\n+from django.contrib.auth.hashers import make_password\n \n     \n #FUNCIONALIDAD PARA SUBIR EL ARCHIVO XML:\n class ArchivoUploadView(APIView):\n"
                },
                {
                    "date": 1718499650549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -637,25 +637,8 @@\n         return Response(serializer.data, status=status.HTTP_200_OK)\n     except Ausencia.DoesNotExist:\n         return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-@api_view(['POST'])\n-def crear_ausencia(request):\n-    serializer = AusenciaSerializerCreate(data=request.data)\n-    if serializer.is_valid():\n-        try:\n-            serializer.save()\n-            messages.success(request, \"Ausencia creada exitosamente.\")\n-            return Response(\"Ausencia creada exitosamente.\", status=status.HTTP_201_CREATED)\n-        except serializers.ValidationError as error:\n-            messages.error(request, \"Error de validación.\")\n-            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n-        except Exception as error:\n-            messages.error(request, f\"Error al crear la ausencia: {str(error)}\")\n-            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    else:\n-        messages.error(request, \"Datos inválidos.\")\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n   \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n"
                },
                {
                    "date": 1718501340213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -637,10 +637,45 @@\n         return Response(serializer.data, status=status.HTTP_200_OK)\n     except Ausencia.DoesNotExist:\n         return Response({\"error\": \"Ausencia no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n \n+from django.utils.dateparse import parse_datetime\n+from datetime import timedelta\n \n-  \n+@api_view(['POST'])\n+def crear_ausencia(request):\n+    if request.method == 'POST':\n+        profesor_id = request.user.profesor.id  # Obtener el ID del profesor logueado\n+        fecha_str = request.data.get('fecha')\n+        motivo = request.data.get('motivo')\n+        \n+        if not fecha_str or not motivo:\n+            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        fecha = parse_datetime(fecha_str)\n+        if not fecha:\n+            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        dia_semana = fecha.strftime('%A')[0].upper()\n+        horarios = Horario.objects.filter(profesor_cod_id=profesor_id, dia=dia_semana)\n+\n+        if not horarios.exists():\n+            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n+        \n+        # Asumimos que solo hay una clase en esa franja horaria\n+        horario = horarios.first()\n+        \n+        ausencia = Ausencia(\n+            profesor_cod_id=profesor_id,\n+            asignatura_cod=horario.asignatura_cod,\n+            franja_cod=horario.franja_cod,\n+            fecha=fecha,\n+            motivo=motivo\n+        )\n+        ausencia.save()\n+        \n+        serializer = AusenciaSerializer(ausencia)\n+        return Response(serializer.data, status=status.HTTP_201_CREATED)\n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718501347979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -674,8 +674,10 @@\n         ausencia.save()\n         \n         serializer = AusenciaSerializer(ausencia)\n         return Response(serializer.data, status=status.HTTP_201_CREATED)\n+    \n+    \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718505071232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -640,42 +640,9 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n-@api_view(['POST'])\n-def crear_ausencia(request):\n-    if request.method == 'POST':\n-        profesor_id = request.user.profesor.id  # Obtener el ID del profesor logueado\n-        fecha_str = request.data.get('fecha')\n-        motivo = request.data.get('motivo')\n-        \n-        if not fecha_str or not motivo:\n-            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        fecha = parse_datetime(fecha_str)\n-        if not fecha:\n-            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        dia_semana = fecha.strftime('%A')[0].upper()\n-        horarios = Horario.objects.filter(profesor_cod_id=profesor_id, dia=dia_semana)\n \n-        if not horarios.exists():\n-            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n-        \n-        # Asumimos que solo hay una clase en esa franja horaria\n-        horario = horarios.first()\n-        \n-        ausencia = Ausencia(\n-            profesor_cod_id=profesor_id,\n-            asignatura_cod=horario.asignatura_cod,\n-            franja_cod=horario.franja_cod,\n-            fecha=fecha,\n-            motivo=motivo\n-        )\n-        ausencia.save()\n-        \n-        serializer = AusenciaSerializer(ausencia)\n-        return Response(serializer.data, status=status.HTTP_201_CREATED)\n     \n     \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n"
                },
                {
                    "date": 1718505102826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import os\n from rest_framework import status\n from rest_framework.parsers import FileUploadParser\n from rest_framework.views import APIView\n-from rest_framework.decorators import api_view, parser_classes\n+from rest_framework.decorators import api_view, parser_classes,\n from rest_framework.parsers import MultiPartParser, FormParser\n from django.contrib.auth.models import User\n from django.contrib.auth.hashers import make_password\n \n@@ -640,8 +640,57 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n+@api_view(['POST'])\n+@permission_classes([IsAuthenticated])\n+def crear_ausencia(request):\n+    try:\n+        print(\"Datos recibidos:\", request.data)\n+        profesor = Profesor.objects.get(usuario=request.user)\n+        print(\"Profesor encontrado:\", profesor)\n+        \n+        fecha_str = request.data.get('fecha')\n+        motivo = request.data.get('motivo')\n+        \n+        if not fecha_str or not motivo:\n+            print(\"Campos obligatorios faltantes.\")\n+            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        fecha = parse_datetime(fecha_str)\n+        if not fecha:\n+            print(\"Fecha inválida:\", fecha_str)\n+            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        dia_semana = fecha.strftime('%A')[0].upper()\n+        horarios = Horario.objects.filter(profesor_cod=profesor, dia=dia_semana)\n+        print(\"Horarios encontrados para el día\", dia_semana, \":\", horarios)\n+        \n+        if not horarios.exists():\n+            print(\"No hay clases asignadas para este día.\")\n+            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n+        \n+        horario = horarios.first()\n+        print(\"Horario seleccionado:\", horario)\n+        \n+        ausencia = Ausencia(\n+            profesor_cod=profesor,\n+            asignatura_cod=horario.asignatura_cod,\n+            franja_cod=horario.franja_cod,\n+            fecha=fecha,\n+            motivo=motivo\n+        )\n+        ausencia.save()\n+        print(\"Ausencia creada:\", ausencia)\n+        \n+        serializer = AusenciaSerializer(ausencia)\n+        return Response(serializer.data, status=status.HTTP_201_CREATED)\n+    except Profesor.DoesNotExist:\n+        print(\"Profesor no encontrado.\")\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as e:\n+        print(\"Error inesperado:\", str(e))\n+        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n     \n     \n @api_view(['PUT'])\n"
                },
                {
                    "date": 1718505142908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n import os\n from rest_framework import status\n from rest_framework.parsers import FileUploadParser\n from rest_framework.views import APIView\n-from rest_framework.decorators import api_view, parser_classes,\n+from rest_framework.decorators import api_view, parser_classes, permission_classes\n from rest_framework.parsers import MultiPartParser, FormParser\n from django.contrib.auth.models import User\n from django.contrib.auth.hashers import make_password\n \n"
                },
                {
                    "date": 1718505178799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import os\n from rest_framework import status\n from rest_framework.parsers import FileUploadParser\n from rest_framework.views import APIView\n+from rest_framework.permissions import IsAuthenticated\n from rest_framework.decorators import api_view, parser_classes, permission_classes\n from rest_framework.parsers import MultiPartParser, FormParser\n from django.contrib.auth.models import User\n from django.contrib.auth.hashers import make_password\n"
                },
                {
                    "date": 1718505855157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,60 +641,10 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n-@api_view(['POST'])\n-@permission_classes([IsAuthenticated])\n-def crear_ausencia(request):\n-    try:\n-        print(\"Datos recibidos:\", request.data)\n-        profesor = Profesor.objects.get(usuario=request.user)\n-        print(\"Profesor encontrado:\", profesor)\n-        \n-        fecha_str = request.data.get('fecha')\n-        motivo = request.data.get('motivo')\n-        \n-        if not fecha_str or not motivo:\n-            print(\"Campos obligatorios faltantes.\")\n-            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        fecha = parse_datetime(fecha_str)\n-        if not fecha:\n-            print(\"Fecha inválida:\", fecha_str)\n-            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        dia_semana = fecha.strftime('%A')[0].upper()\n-        horarios = Horario.objects.filter(profesor_cod=profesor, dia=dia_semana)\n-        print(\"Horarios encontrados para el día\", dia_semana, \":\", horarios)\n-        \n-        if not horarios.exists():\n-            print(\"No hay clases asignadas para este día.\")\n-            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n-        \n-        horario = horarios.first()\n-        print(\"Horario seleccionado:\", horario)\n-        \n-        ausencia = Ausencia(\n-            profesor_cod=profesor,\n-            asignatura_cod=horario.asignatura_cod,\n-            franja_cod=horario.franja_cod,\n-            fecha=fecha,\n-            motivo=motivo\n-        )\n-        ausencia.save()\n-        print(\"Ausencia creada:\", ausencia)\n-        \n-        serializer = AusenciaSerializer(ausencia)\n-        return Response(serializer.data, status=status.HTTP_201_CREATED)\n-    except Profesor.DoesNotExist:\n-        print(\"Profesor no encontrado.\")\n-        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n-    except Exception as e:\n-        print(\"Error inesperado:\", str(e))\n-        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n \n     \n-    \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718505871165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,8 +641,9 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n+    path('ausencia/crear',crear_ausencia),\n \n     \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n"
                },
                {
                    "date": 1718505882390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,9 +641,8 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n-    path('ausencia/crear',crear_ausencia),\n \n     \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n"
                },
                {
                    "date": 1718505900004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,9 +641,62 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n+@api_view(['POST'])\n+@permission_classes([IsAuthenticated])\n+def crear_ausencia(request):\n+    try:\n+        print(\"Datos recibidos:\", request.data)\n+        profesor = Profesor.objects.get(usuario=request.user)\n+        print(\"Profesor encontrado:\", profesor)\n+        \n+        fecha_str = request.data.get('fecha')\n+        motivo = request.data.get('motivo')\n+        \n+        if not fecha_str or not motivo:\n+            print(\"Campos obligatorios faltantes.\")\n+            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        fecha = parse_datetime(fecha_str)\n+        if not fecha:\n+            print(\"Fecha inválida:\", fecha_str)\n+            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        dia_semana = fecha.strftime('%A')[0].upper()\n+        horarios = Horario.objects.filter(profesor_cod=profesor, dia=dia_semana)\n+        print(\"Horarios encontrados para el día\", dia_semana, \":\", horarios)\n+        \n+        if not horarios.exists():\n+            print(\"No hay clases asignadas para este día.\")\n+            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n+        \n+        # Asumimos que solo hay una clase en esa franja horaria\n+        horario = horarios.first()\n+        print(\"Horario seleccionado:\", horario)\n+        \n+        ausencia = Ausencia(\n+            profesor_cod=profesor,\n+            fecha=fecha,\n+            motivo=motivo\n+        )\n+        ausencia.save()\n+        print(\"Ausencia creada:\", ausencia)\n+        \n+        # Crear un diccionario con la información adicional para la respuesta\n+        respuesta = {\n+            \"ausencia\": AusenciaSerializer(ausencia).data,\n+            \"asignatura\": horario.asignatura_cod.descripcion,\n+            \"franja\": horario.franja_cod.descripcion\n+        }\n \n+        return Response(respuesta, status=status.HTTP_201_CREATED)\n+    except Profesor.DoesNotExist:\n+        print(\"Profesor no encontrado.\")\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as e:\n+        print(\"Error inesperado:\", str(e))\n+        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n"
                },
                {
                    "date": 1718506311893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -695,9 +695,11 @@\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n     except Exception as e:\n         print(\"Error inesperado:\", str(e))\n         return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n-    \n+  \n+  \n+  \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718506318422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,12 +694,11 @@\n         print(\"Profesor no encontrado.\")\n         return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n     except Exception as e:\n         print(\"Error inesperado:\", str(e))\n-        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n+        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR) \n   \n   \n-  \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718506673516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,64 +641,10 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n-@api_view(['POST'])\n-@permission_classes([IsAuthenticated])\n-def crear_ausencia(request):\n-    try:\n-        print(\"Datos recibidos:\", request.data)\n-        profesor = Profesor.objects.get(usuario=request.user)\n-        print(\"Profesor encontrado:\", profesor)\n-        \n-        fecha_str = request.data.get('fecha')\n-        motivo = request.data.get('motivo')\n-        \n-        if not fecha_str or not motivo:\n-            print(\"Campos obligatorios faltantes.\")\n-            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        fecha = parse_datetime(fecha_str)\n-        if not fecha:\n-            print(\"Fecha inválida:\", fecha_str)\n-            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n-        \n-        dia_semana = fecha.strftime('%A')[0].upper()\n-        horarios = Horario.objects.filter(profesor_cod=profesor, dia=dia_semana)\n-        print(\"Horarios encontrados para el día\", dia_semana, \":\", horarios)\n-        \n-        if not horarios.exists():\n-            print(\"No hay clases asignadas para este día.\")\n-            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n-        \n-        # Asumimos que solo hay una clase en esa franja horaria\n-        horario = horarios.first()\n-        print(\"Horario seleccionado:\", horario)\n-        \n-        ausencia = Ausencia(\n-            profesor_cod=profesor,\n-            fecha=fecha,\n-            motivo=motivo\n-        )\n-        ausencia.save()\n-        print(\"Ausencia creada:\", ausencia)\n-        \n-        # Crear un diccionario con la información adicional para la respuesta\n-        respuesta = {\n-            \"ausencia\": AusenciaSerializer(ausencia).data,\n-            \"asignatura\": horario.asignatura_cod.descripcion,\n-            \"franja\": horario.franja_cod.descripcion\n-        }\n-\n-        return Response(respuesta, status=status.HTTP_201_CREATED)\n-    except Profesor.DoesNotExist:\n-        print(\"Profesor no encontrado.\")\n-        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n-    except Exception as e:\n-        print(\"Error inesperado:\", str(e))\n-        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR) \n+ \n   \n-  \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n         ausencia = Ausencia.objects.get(id=id)\n"
                },
                {
                    "date": 1718506692406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,8 +641,9 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n+    path('ausencia/crear',crear_ausencia),\n  \n   \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n"
                },
                {
                    "date": 1718506708250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -641,9 +641,77 @@\n \n from django.utils.dateparse import parse_datetime\n from datetime import timedelta\n \n- \n+@api_view(['POST'])\n+@permission_classes([IsAuthenticated])\n+def crear_ausencia(request):\n+    try:\n+        print(\"Datos recibidos:\", request.data)\n+        profesor = Profesor.objects.get(usuario=request.user)\n+        print(\"Profesor encontrado:\", profesor)\n+        \n+        fecha_str = request.data.get('fecha')\n+        motivo = request.data.get('motivo')\n+        \n+        if not fecha_str or not motivo:\n+            print(\"Campos obligatorios faltantes.\")\n+            return Response({\"error\": \"Faltan campos obligatorios.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        fecha = parse_datetime(fecha_str)\n+        if not fecha:\n+            print(\"Fecha inválida:\", fecha_str)\n+            return Response({\"error\": \"Fecha inválida.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        # Convertir el día de la semana a la representación adecuada (L, M, X, J, V, S, D)\n+        dia_semana = fecha.strftime('%A')\n+        dias = {\n+            'Monday': 'L',\n+            'Tuesday': 'M',\n+            'Wednesday': 'X',\n+            'Thursday': 'J',\n+            'Friday': 'V',\n+            'Saturday': 'S',\n+            'Sunday': 'D'\n+        }\n+        dia_semana = dias.get(dia_semana)\n+        if not dia_semana:\n+            print(\"Día de la semana inválido:\", dia_semana)\n+            return Response({\"error\": \"Día de la semana inválido.\"}, status=status.HTTP_400_BAD_REQUEST)\n+        \n+        horarios = Horario.objects.filter(profesor_cod=profesor, dia=dia_semana)\n+        print(\"Horarios encontrados para el día\", dia_semana, \":\", horarios)\n+        \n+        if not horarios.exists():\n+            print(\"No hay clases asignadas para este día.\")\n+            return Response({\"error\": \"No hay clases asignadas para este día.\"}, status=status.HTTP_404_NOT_FOUND)\n+        \n+        # Asumimos que solo hay una clase en esa franja horaria\n+        horario = horarios.first()\n+        print(\"Horario seleccionado:\", horario)\n+        \n+        ausencia = Ausencia(\n+            profesor_cod=profesor,\n+            fecha=fecha,\n+            motivo=motivo\n+        )\n+        ausencia.save()\n+        print(\"Ausencia creada:\", ausencia)\n+        \n+        # Crear un diccionario con la información adicional para la respuesta\n+        respuesta = {\n+            \"ausencia\": AusenciaSerializer(ausencia).data,\n+            \"asignatura\": horario.asignatura_cod.descripcion,\n+            \"franja\": horario.franja_cod.descripcion\n+        }\n+\n+        return Response(respuesta, status=status.HTTP_201_CREATED)\n+    except Profesor.DoesNotExist:\n+        print(\"Profesor no encontrado.\")\n+        return Response({\"error\": \"Profesor no encontrado.\"}, status=status.HTTP_404_NOT_FOUND)\n+    except Exception as e:\n+        print(\"Error inesperado:\", str(e))\n+        return Response({\"error\": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n   \n @api_view(['PUT'])\n def editar_ausencia(request, id):\n     try:\n"
                },
                {
                    "date": 1718644140950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -749,8 +749,9 @@\n             print(\"Creando ausencia para una asignatura específica.\")\n             if not horario_id:\n                 return Response({\"error\": \"Falta el identificador del horario.\"}, status=status.HTTP_400_BAD_REQUEST)\n             horario = Horario.objects.get(horario_cod=horario_id)\n+            print('')\n             ausencia = Ausencia(profesor_cod=profesor, fecha=fecha, motivo=motivo, horario=horario)\n             ausencia.save()\n             print(\"Ausencia creada:\", ausencia)\n         \n"
                }
            ],
            "date": 1717868958481,
            "name": "Commit-0",
            "content": "from .models import *\n,from .serializers import *\nfrom rest_framework.response import Response\nfrom rest_framework.decorators import api_view\nfrom django.http import FileResponse, HttpResponse\nfrom .serializers import *\nimport xml.etree.ElementTree as ET\nfrom django.conf import settings\nimport os\nfrom rest_framework import status\nfrom rest_framework.parsers import FileUploadParser\nfrom rest_framework.views import APIView\nfrom rest_framework.decorators import api_view, parser_classes\nfrom rest_framework.parsers import MultiPartParser, FormParser\nfrom django.contrib.auth.models import User\n\n    \n#FUNCIONALIDAD PARA SUBIR EL ARCHIVO XML:\nclass ArchivoUploadView(APIView):\n    parser_classes = (MultiPartParser, FormParser)\n\n    def post(self, request, *args, **kwargs):\n        if 'archivo' not in request.FILES:\n            return Response(\"No se ha enviado ningún archivo.\", status=status.HTTP_400_BAD_REQUEST)\n\n        archivo_serializer = ArchivoSerializer(data=request.data)\n        if archivo_serializer.is_valid():\n            try:\n                archivo_instance = archivo_serializer.save()\n                \n                print(f\"Archivo instance: {archivo_instance}\")\n                \n                archivo_instance.archivo = request.FILES['archivo']\n                archivo_instance.save()\n                \n                file_path = archivo_instance.archivo.path\n                print(file_path)\n                print(f\"Archivo guardado en: {file_path}\")\n\n                response = cargar_xml(self.request._request, archivo_instance.archivo.path)\n\n\n                return response\n\n            except Exception as e:\n                print(f\"Error al guardar el archivo: {e}\")\n                return Response(f\"Error al guardar el archivo: {e}\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n        else:\n            print(archivo_serializer.errors)\n            return Response(archivo_serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n#XML:\n@api_view(['POST'])\n@parser_classes([MultiPartParser, FormParser])\ndef cargar_xml(request, file_path):\n    try:\n        # Leer el archivo XML\n        tree = ET.parse(file_path)\n        root = tree.getroot()\n\n        print(f\"Root element: {root.tag}\")\n\n        # Procesar datos de asignaturas\n        for table in root.findall(\".//table[@name='asignaturas']\"):\n            print(\"Encontrada tabla de asignaturas\")\n            asignatura_data = {}\n            for column in table.findall('column'):\n                asignatura_data[column.get('name')] = column.text\n\n            asignatura_cod = asignatura_data.get('asignatura_cod')\n            descripcion = asignatura_data.get('descripcion')\n\n            print(f\"Procesando asignatura: asignatura_cod={asignatura_cod}, descripcion={descripcion}\")\n\n            asignatura, created = Asignatura.objects.update_or_create(\n                asignatura_cod=asignatura_cod,\n                defaults={'descripcion': descripcion}\n            )\n            if created:\n                print(f\"Asignatura creada: {asignatura}\")\n            else:\n                print(f\"Asignatura actualizada: {asignatura}\")\n\n        # Procesar datos de aulas\n        for table in root.findall(\".//table[@name='aulas']\"):\n            print(\"Encontrada tabla de aulas\")\n            aula_data = {}\n            for column in table.findall('column'):\n                aula_data[column.get('name')] = column.text\n\n            aula_cod = aula_data.get('aula_cod')\n            descripcion = aula_data.get('descripcion')\n\n            # Crear o actualizar el objeto Aula\n            Aula.objects.update_or_create(\n                aula_cod=aula_cod,\n                defaults={'descripcion': descripcion}\n            )\n\n        # Procesar datos de franjas\n        for table in root.findall(\".//table[@name='franjas']\"):\n            for column in table.findall('column'):\n                franja_data = {column.get('name'): column.text for column in table.findall('column')}\n                Franja.objects.update_or_create(\n                    franja_cod=franja_data.get('franja_cod'),\n                    defaults={\n                        'descripcion': franja_data.get('descripcion'),\n                        'horadesde': franja_data.get('horadesde'),\n                        'horahasta': franja_data.get('horahasta')\n                    }\n                )\n\n        # Procesar datos de grupos\n        for table in root.findall(\".//table[@name='grupos']\"):\n            for column in table.findall('column'):\n                grupo_data = {column.get('name'): column.text for column in table.findall('column')}\n                Grupo.objects.update_or_create(\n                    grupo_cod=grupo_data.get('grupo_cod'),\n                    defaults={'descripcion': grupo_data.get('descripcion')}\n                )\n\n        # Procesar datos de profesores\n        for table in root.findall(\".//table[@name='profesores']\"):\n            print(\"Encontrada tabla de profesores\")\n            profesor_data = {}\n            for column in table.findall('column'):\n                profesor_data[column.get('name')] = column.text\n\n            profesor_cod = profesor_data.get('professor_cod')\n            nombre = profesor_data.get('nombre')\n\n            # Verificar si profesor_cod es None o vacío\n            if not profesor_cod:\n                print(f\"Error: El campo 'profesor_cod' está vacío o no existe.\")\n                continue\n\n            # Asignar valores predeterminados para los campos que no están en el XML\n            email = f\"{profesor_cod.lower()}@example.com\"  # Email predeterminado\n\n            # Crear el usuario asociado si no existe\n            usuario, created = Usuario.objects.get_or_create(username=profesor_cod, defaults={\n                'password': Usuario.objects.make_random_password(),\n                'rol': Usuario.PROFESOR\n            })\n\n            if created:\n                print(f\"Usuario creado: {usuario}\")\n            else:\n                print(f\"Usuario actualizado: {usuario}\")\n\n            # Crear o actualizar el objeto Profesor\n            profesor, created = Profesor.objects.update_or_create(\n                profesor_cod=profesor_cod,\n                defaults={\n                    'nombre': nombre,\n                    'email': email,\n                    'usuario': usuario\n                }\n            )\n            if created:\n                print(f\"Profesor creado: {profesor}\")\n            else:\n                print(f\"Profesor actualizado: {profesor}\")\n\n        # Procesar datos de horarios\n        for table in root.findall(\".//table[@name='horarios']\"):\n            horario_data = {column.get('name'): column.text for column in table.findall('column')}\n\n            # Verificar y manejar si aula_cod está vacío\n            aula_cod = horario_data.get('aula_cod')\n            if not aula_cod:\n                print(f\"El campo 'aula_cod' está vacío para el horario con código {horario_data.get('horario_cod')}. Se asignará una cadena vacía.\")\n                aula_cod = \"\"  # Asignar una cadena vacía si aula_cod está vacío\n\n            try:\n                profesor = Profesor.objects.get(profesor_cod=horario_data.get('professor_cod'))\n                asignatura = Asignatura.objects.get(asignatura_cod=horario_data.get('asignatura_cod'))\n                grupo = Grupo.objects.get(grupo_cod=horario_data.get('grupo_cod'))\n                franja = Franja.objects.get(franja_cod=horario_data.get('franja_cod'))\n\n                # Si aula_cod es una cadena vacía, crear un aula predeterminada\n                if aula_cod == \"\":\n                    aula, created = Aula.objects.get_or_create(\n                        aula_cod=\"\",\n                        defaults={'descripcion': 'Aula no especificada'}\n                    )\n                else:\n                    aula = Aula.objects.get(aula_cod=aula_cod)\n\n                Horario.objects.update_or_create(\n                    horario_cod=horario_data.get('horario_cod'),\n                    defaults={\n                        'profesor_cod': profesor,\n                        'dia': horario_data.get('dia'),\n                        'asignatura_cod': asignatura,\n                        'aula_cod': aula,\n                        'grupo_cod': grupo,\n                        'franja_cod': franja,\n                        'periodo_cod': horario_data.get('periodo_cod')\n                    }\n                )\n            except (Profesor.DoesNotExist, Asignatura.DoesNotExist, Aula.DoesNotExist, Grupo.DoesNotExist, Franja.DoesNotExist) as e:\n                print(f\"Error: {e}. El horario con código {horario_data.get('horario_cod')} no se puede crear o actualizar.\")\n                continue\n\n        return Response(\"Datos cargados exitosamente.\", status=status.HTTP_200_OK)\n    except Exception as e:\n        print(f\"Error al cargar los datos: {str(e)}\")\n        return Response(f\"Error al cargar los datos: {str(e)}\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n\n@api_view(['POST'])\ndef borrar_archivoXML(request):\n    try:\n        # Eliminar todos los registros de las tablas correspondientes\n        Horario.objects.all().delete()\n        Asignatura.objects.all().delete()\n        Aula.objects.all().delete()\n        Franja.objects.all().delete()\n        Grupo.objects.all().delete()\n        Profesor.objects.all().delete()\n        Usuario.objects.all().delete()\n        \n        # Eliminar registros de Asistencia\n        Ausencia.objects.all().delete()\n\n        return Response(\"Base de datos vaciada exitosamente.\", status=status.HTTP_200_OK)\n    except Exception as e:\n        print(f\"Error al vaciar la base de datos: {str(e)}\")\n        return Response(f\"Error al vaciar la base de datos: {str(e)}\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n        # Procesar datos de ausencias\n        # for table in root.findall(\".//table[@name='ausencias']\"):\n        #     for column in table.findall('column'):\n        #         ausencia_data = {column.get('name'): column.text for column in table.findall('column')}\n        #         try:\n        #             profesor = Profesor.objects.get(profesor_cod=ausencia_data.get('professor_cod'))\n        #             asignatura = Asignatura.objects.get(asignatura_cod=ausencia_data.get('asignatura_cod'))\n        #             horario = Horario.objects.get(horario_cod=ausencia_data.get('horario_cod'))\n\n        #             Ausencia.objects.update_or_create(\n        #                 profesor_cod=profesor,\n        #                 asignatura_cod=asignatura,\n        #                 horario_cod=horario,\n        #                 defaults={\n        #                     'fecha': ausencia_data.get('fecha') or timezone.now(),\n        #                     'motivo': ausencia_data.get('motivo')\n        #                 }\n        #             )\n        #         except (Profesor.DoesNotExist, Asignatura.DoesNotExist, Horario.DoesNotExist) as e:\n        #             print(f\"Error: {e}. La ausencia no se puede crear o actualizar.\")\n        #             continue\n\n\n\n#CRUD HORARIO: \n@api_view(['POST'])\ndef crear_horario(request):\n    serializer = HorarioSerializerCreate(data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response({\"message\": \"Horario Creado\"}, status=status.HTTP_201_CREATED)\n        except Exception as error:\n            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n@api_view(['GET'])\ndef get_horario(request, pk):\n    horario = Horario.objects.get(horario_cod=pk)\n    serializer = HorarioSerializer(horario)\n    return Response(serializer.data)\n\n\n\n@api_view(['PUT'])\ndef update_horario(request, pk):\n    try:\n        horario = Horario.objects.get(pk=pk)\n    except Horario.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    serializer = HorarioSerializer(horario, data=request.data)\n    if serializer.is_valid():\n        serializer.save()\n        return Response(serializer.data)\n    return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['DELETE'])\ndef delete_horario(request, pk):\n    try:\n        horario = Horario.objects.get(pk=pk)\n    except Horario.DoesNotExist:\n        return Response(status=status.HTTP_404_NOT_FOUND)\n\n    horario.delete()\n    return Response(status=status.HTTP_204_NO_CONTENT)\n    \n@api_view(['DELETE'])\ndef eliminar_ausencia(request, id):\n    ausencia = Ausencia.objects.get(franja_cod=id)\n    try:\n        ausencia.delete()\n        return Response('Ausencia eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n       \n    \n\n@api_view(['GET'])\ndef horarios_list(request):\n    horarios = Horario.objects.all()\n    serializer = HorarioSerializer(horarios,many=True)\n    return Response(serializer.data)\n\n\n#CRUD PARA ASIGNATURAS:\n@api_view(['GET'])\ndef asignaturas_list(request):\n    asignaturas = Asignatura.objects.all()\n    serializer= AsignaturaSerializer(asignaturas, many=True)\n    return Response(serializer.data)\n     \n@api_view(['GET'])\ndef asignaturas_obtener(request,asignatura_cod):\n    asignatura = Asignatura.objects.get(asignatura_cod=asignatura_cod)\n    serializer= AsignaturaSerializer(asignatura)\n    return Response(serializer.data)\n\n@api_view(['POST'])\ndef crear_asignatura(request):\n    print(request.data)\n    serializer = AsignaturaSerializerCreate(data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response(\"ASIGNATURA CREADA\", status=status.HTTP_200_OK)\n        except serializers.ValidationError as error:\n            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n        except Exception as error:\n            print(repr(error))\n            return Response(repr(error), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n@api_view(['GET', 'PUT'])\ndef editar_asignatura(request, id):\n    try:\n        asignatura = Asignatura.objects.get(asignatura_cod=id)\n    except Asignatura.DoesNotExist:\n        return Response({\"error\": \"Asignatura no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n    \n    if request.method == 'GET':\n        serializer = AsignaturaSerializerCreate(asignatura)\n        return Response(serializer.data)\n    \n    elif request.method == 'PUT':\n        serializer = AsignaturaSerializerCreate(asignatura, data=request.data)\n        if serializer.is_valid():\n            try:\n                serializer.save()\n                return Response(\"Asignatura actualizada.\", status=status.HTTP_200_OK)\n            except Exception as error:\n                return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n        else:\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['DELETE'])\ndef eliminar_asignatura(request, id):\n    asignatura = Asignatura.objects.get(asignatura_cod=id)\n    try:\n        asignatura.delete()\n        return Response('Asignatura Eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n    \n#CRUD PROFESORES:  \n@api_view(['GET'])\ndef profesores_obtener(request,id):\n    asignatura = Profesor.objects.get(profesor_cod=id)\n    serializer= ProfesorSerializer(asignatura)\n    return Response(serializer.data)\n    \n@api_view(['GET'])\ndef profesores_list(request):\n    profesor = Profesor.objects.all()\n    serializer = ProfesorSerializer(profesor, many=True)\n    return Response(serializer.data)\n\n@api_view(['DELETE'])\ndef eliminar_profesor(request, id):\n    profesor = Profesor.objects.get(profesor_cod=id)\n    try:\n        profesor.delete()\n        return Response('Profesor eliminado.')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n\n#CRUD AULA:\n@api_view(['GET'])\ndef aulas_list(request):\n   aulas = Aula.objects.all()\n   serializer= AulaSerializer(aulas, many=True)\n   return Response(serializer.data)\n\n\n@api_view(['POST'])\ndef crear_aula(request):\n    serializer = AulaSerializerCreate(data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response(\"Aula creada.\")\n        except Exception as error:\n            return Response(error, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    \n    \n@api_view(['PUT'])\ndef actualizar_aula(request, pk):\n    try:\n        aula = Aula.objects.get(pk=pk)\n    except Aula.DoesNotExist:\n        return Response({\"error\": \"Aula no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n\n    serializer = AulaSerializerCreate(aula, data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response(\"Aula actualizada.\", status=status.HTTP_200_OK)\n        except Exception as error:\n            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)   \n    \n    \n@api_view(['DELETE'])\ndef eliminar_aula(request, id):\n    aula = Aula.objects.get(aula_cod=id)\n    try:\n        aula.delete()\n        return Response('Aula eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n\n\n#CRUD GRUPOS:\n@api_view(['GET'])\ndef grupos_list(request):\n    grupos = Grupo.objects.all()\n    serializer = GrupoSerializer(grupos, many=True)\n    return Response(serializer.data)\n\n\n\n\n@api_view(['DELETE'])\ndef eliminar_grupo(request, id):\n    grupo = Grupo.objects.get(grupo_cod=id)\n    try:\n        grupo.delete()\n        return Response('Grupo eliminado-')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n    \n#CRUD FRANJAS:\n@api_view(['DELETE'])\ndef eliminar_franja(request, id):\n    franja = Franja.objects.get(franja_cod=id)\n    try:\n        franja.delete()\n        return Response('Franja eliminado-')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n\n\n\n@api_view(['GET'])\ndef franjas_list(request):\n    franjas = Franja.objects.all()\n    serializer = FranjaSerializer(franjas,many=True)\n    return Response(serializer.data)\n\n\ndef xml_data_view(request):\n    xml_file_path = os.path.join(settings.BASE_DIR, 'datos.xml')\n    \n    return FileResponse(open(xml_file_path, 'rb'))\n\n#CRUD PARA ASIGNATURAS:\n@api_view(['GET'])\ndef asignaturas_list(request):\n    asignaturas = Asignatura.objects.all()\n    serializer= AsignaturaSerializer(asignaturas, many=True)\n    return Response(serializer.data)\n# @api_view(['GET'])\n# def asignaturas_list(request):\n#     try:\n#         # Parsear el archivo XML\n#         tree = ET.parse(settings.XML_FILE_PATH)\n#         root = tree.getroot()\n\n#         # Obtener los datos de la tabla de asignaturas del archivo XML\n#         asignaturas_data = []\n#         for table in root.findall(\".//table[@name='asignaturas']\"):\n#             asignatura_data = {}\n#             for column in table.findall('column'):\n#                 asignatura_data[column.get('name')] = column.text\n#             asignaturas_data.append(asignatura_data)\n\n#         # Guardar las asignaturas en la base de datos\n#         for asignatura_data in asignaturas_data:\n#             # Intentar obtener la asignatura existente por su código\n#             asignatura, created = Asignatura.objects.update_or_create(\n#                 asignatura_cod=asignatura_data.get('asignatura_cod'),\n#                 defaults={'descripcion': asignatura_data.get('descripcion')}\n#             )\n        \n#         # Serializar las asignaturas para devolverlas como respuesta\n#         serializer = AsignaturaSerializer(Asignatura.objects.all(), many=True)\n\n#         # Devolver los datos serializados\n#         return Response(serializer.data, status=status.HTTP_200_OK)\n#     except FileNotFoundError:\n#         return Response(\"El archivo XML no se encontró.\", status=status.HTTP_404_NOT_FOUND)\n#     except Exception as e:\n#         return Response(str(e), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n     \n@api_view(['GET'])\ndef asignaturas_obtener(request,asignatura_cod):\n    asignatura = Asignatura.objects.get(asignatura_cod=asignatura_cod)\n    serializer= AsignaturaSerializer(asignatura)\n    return Response(serializer.data)\n\n@api_view(['POST'])\ndef crear_asignatura(request):\n    print(request.data)\n    serializer = AsignaturaSerializerCreate(data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response(\"ASIGNATURA CREADA\", status=status.HTTP_200_OK)\n        except serializers.ValidationError as error:\n            return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n        except Exception as error:\n            print(repr(error))\n            return Response(repr(error), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n\n# @api_view(['PUT'])\n# def editar_asignatura(request, asignatura_cod):\n#     asignatura = Asignatura.objects.get(asignatura_cod=asignatura_cod)\n#     #data[\"asignatura_cod\"] = asignatura_cod\n#     asignaturaCreateSerializer = AsignaturaSerializerCreate(data=request.data, instance=asignatura)\n#     if asignaturaCreateSerializer.is_valid():\n#         try:\n#             asignaturaCreateSerializer.save()\n#             return Response(\"Asignatura EDITADA\")\n#         except serializers.ValidationError as error:\n#             return Response(error.detail, status=status.HTTP_400_BAD_REQUEST)\n#         except Exception as error:\n#             return Response(repr(error), status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n#     else:\n#         return Response(asignaturaCreateSerializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    \n@api_view(['GET', 'PUT'])\ndef editar_asignatura(request, id):\n    try:\n        asignatura = Asignatura.objects.get(asignatura_cod=id)\n    except Asignatura.DoesNotExist:\n        return Response({\"error\": \"Asignatura no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n    \n    if request.method == 'GET':\n        serializer = AsignaturaSerializerCreate(asignatura)\n        return Response(serializer.data)\n    \n    elif request.method == 'PUT':\n        serializer = AsignaturaSerializerCreate(asignatura, data=request.data)\n        if serializer.is_valid():\n            try:\n                serializer.save()\n                return Response(\"Asignatura actualizada.\", status=status.HTTP_200_OK)\n            except Exception as error:\n                return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n        else:\n            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n@api_view(['DELETE'])\ndef eliminar_asignatura(request, id):\n    asignatura = Asignatura.objects.get(asignatura_cod=id)\n    try:\n        asignatura.delete()\n        return Response('Asignatura Eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n    \n    \n\n    \n@api_view(['GET'])\ndef profesores_obtener(request,id):\n    asignatura = Profesor.objects.get(profesor_cod=id)\n    serializer= ProfesorSerializer(asignatura)\n    return Response(serializer.data)\n    \n\n\n@api_view(['DELETE'])\ndef eliminar_profesor(request, id):\n    profesor = Profesor.objects.get(profesor_cod=id)\n    try:\n        profesor.delete()\n        return Response('Profesor eliminado.')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n#CRUD AULA:\n@api_view(['GET'])\ndef aulas_list(request):\n   aulas = Aula.objects.all()\n   serializer= AulaSerializer(aulas, many=True)\n   return Response(serializer.data)\n\n\n@api_view(['POST'])\ndef crear_aula(request):\n    serializer = AulaSerializerCreate(data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response(\"Aula creada.\")\n        except Exception as error:\n            return Response(error, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    \n    \n@api_view(['PUT'])\ndef actualizar_aula(request, pk):\n    try:\n        aula = Aula.objects.get(pk=pk)\n    except Aula.DoesNotExist:\n        return Response({\"error\": \"Aula no encontrada.\"}, status=status.HTTP_404_NOT_FOUND)\n\n    serializer = AulaSerializerCreate(aula, data=request.data)\n    if serializer.is_valid():\n        try:\n            serializer.save()\n            return Response(\"Aula actualizada.\", status=status.HTTP_200_OK)\n        except Exception as error:\n            return Response({\"error\": str(error)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n    else:\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)   \n    \n    \n    \n@api_view(['DELETE'])\ndef eliminar_aula(request, id):\n    aula = Aula.objects.get(aula_cod=id)\n    try:\n        aula.delete()\n        return Response('Aula eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n\n\n#CRUD GRUPOS:\n@api_view(['GET'])\ndef grupos_list(request):\n    grupos = Grupo.objects.all()\n    serializer = GrupoSerializer(grupos, many=True)\n    return Response(serializer.data)\n\n\n\n\n@api_view(['DELETE'])\ndef eliminar_grupo(request, id):\n    grupo = Grupo.objects.get(grupo_cod=id)\n    try:\n        grupo.delete()\n        return Response('Grupo eliminado-')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)\n    \n    \n#CRUD FRANJAS:\n@api_view(['DELETE'])\ndef eliminar_franja(request, id):\n    franja = Franja.objects.get(franja_cod=id)\n    try:\n        franja.delete()\n        return Response('Franja eliminado-')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n    \n\n    \n#CRUD AUSENCIA:\n@api_view(['DELETE'])\ndef eliminar_ausencia(request, id):\n    ausencia = Ausencia.objects.get(franja_cod=id)\n    try:\n        ausencia.delete()\n        return Response('Ausencia eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n    \n     \n\n\n\n \n#CRUD PROFESORES:\n@api_view(['GET'])\ndef profesores_list(request):\n   profesores = Profesor.objects.all()\n   serializer = ProfesorSerializer(profesores, many=True)\n   return Response(serializer.data)\n\n\n@api_view(['GET'])\ndef obtener_profesor(request,id):\n    profesor = Profesor.objects.select_related('usuario')\n    profesor = profesor.get(profesor_cod=id)\n    \n    \n\n@api_view(['POST'])\ndef crear_profesor(request):\n    pass\n\n@api_view(['DELETE'])\ndef eliminar_profesor(request, id):\n    profesor = Profesor.objects.get(franja_cod=id)\n    try:\n        profesor.delete()\n        return Response('Profesor eliminado-')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n    \n#CRUD AUSENCIA:\n@api_view(['DELETE'])\ndef eliminar_ausencia(request, id):\n    ausencia = Ausencia.objects.get(franja_cod=id)\n    try:\n        ausencia.delete()\n        return Response('Ausencia eliminada')\n    except Exception as error:\n        return Response(repr(error), status = status.HTTP_500_INTERNAL_SERVER_ERROR)  \n    \n     \n\n\n\"\"\" F U N C I O N A L I D A D E S\"\"\"\n#Filtrar horarios por profesor:\n\n@api_view(['GET'])\ndef horario_profesor(request, id):\n    try:\n        profesor = Profesor.objects.get(profesor_cod=id)\n        horarios = Horario.objects.filter(profesor_cod=profesor)\n        horario_serializado = HorarioSerializer(horarios, many=True)\n        return Response(horario_serializado.data)\n    except Profesor.DoesNotExist:\n        return Response(f\"El profesor con el ID {id} no existe.\", status=status.HTTP_404_NOT_FOUND)\n    except Exception as e:\n        return Response(f\"Error al obtener los horarios del profesor: {str(e)}\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n\n#Filtrar horario por grupos:\n@api_view(['GET'])\ndef horario_grupo(request, id):\n    try:\n        grupo = Grupo.objects.get(grupo_cod=id)\n        horarios = Horario.objects.filter(grupo_cod=grupo)\n        \n        # Serializar los datos de los horarios\n        horarios_serializados = HorarioSerializer(horarios, many=True).data\n        \n        # Extraer solo los campos específicos\n        horarios_simplificados = [\n            {\n                'dia': horario['dia'],\n                'franja': horario['franja_cod']['descripcion'],  # Utiliza la descripción de la franja horaria\n                'asignatura': horario['asignatura_cod']['descripcion']  # Utiliza la descripción de la asignatura\n            }\n            for horario in horarios_serializados\n        ]\n        \n        return Response(horarios_simplificados, status=status.HTTP_200_OK)\n    except Grupo.DoesNotExist:\n        return Response({\"detail\": f\"El grupo con el ID {id} no existe.\"}, status=status.HTTP_404_NOT_FOUND)\n    except Exception as e:\n        return Response({\"detail\": f\"Error al obtener los horarios del grupo: {str(e)}\"}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# # Procesar datos de ausencias\n# for table in root.findall(\".//table[@name='ausencias']\"):\n#     for column in table.findall('column'):\n#         ausencia_data = {column.get('name'): column.text for column in table.findall('column')}\n#         # Procesa los datos de ausencias y guárdalos en el modelo Asistencia\n#         # Puedes adaptar esta lógica según la estructura de tus datos de ausencias y tu modelo Asistencia\n#         # Por ejemplo:\n#         fecha = ausencia_data.get('fecha')\n#         motivo = ausencia_data.get('motivo')\n#         alumno_cod = ausencia_data.get('alumno_cod')\n\n#         # Aquí deberías guardar los datos de ausencias en tu modelo Asistencia\n#         # Por ejemplo:\n#         Asistencia.objects.create(fecha=fecha, motivo=motivo, alumno_cod=alumno_cod)\n@api_view(['POST'])\ndef vaciar_base_de_datos(request):\n    try:\n        # Eliminar todos los registros de las tablas correspondientes\n        Horario.objects.all().delete()\n        Asignatura.objects.all().delete()\n        Aula.objects.all().delete()\n        Franja.objects.all().delete()\n        Grupo.objects.all().delete()\n        Profesor.objects.all().delete()\n        Usuario.objects.all().delete()\n        \n        # Eliminar registros de Asistencia\n        Ausencia.objects.all().delete()\n\n        # Eliminar archivos\n        archivos = Archivo.objects.all()\n        for archivo in archivos:\n            archivo_path = os.path.join(settings.MEDIA_ROOT, archivo.archivo.name)\n            if os.path.exists(archivo_path):\n                os.remove(archivo_path)\n            archivo.delete()\n\n        return Response(\"Base de datos vaciada exitosamente.\", status=status.HTTP_200_OK)\n    except Exception as e:\n        print(f\"Error al vaciar la base de datos: {str(e)}\")\n        return Response(f\"Error al vaciar la base de datos: {str(e)}\", status=status.HTTP_500_INTERNAL_SERVER_ERROR)"
        }
    ]
}